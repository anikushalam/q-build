{"version":3,"file":"static/js/15526.9a2a075d.chunk.js","mappings":"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","sources":["Loader/EmptyInfo.jsx","Loader/QvipleLoading.jsx","Notification/UserNotification/Components/Activity/StudentMessageActivity.jsx","Notification/UserNotification/Components/StudentMessage/StudentMessage.jsx","optimized/Utils/Functions/localTime.js","../node_modules/dayjs/plugin/localizedFormat.js","webpack://mithkal-qviple/./src/Notification/UserNotification/Components/Activity/Activity.module.css?fe3a","webpack://mithkal-qviple/./src/optimized/UserStaffMember/FinanceManager/Income/Income.module.css?46f8","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React from \"react\";\nimport style from \"./QvipleLoader.module.css\";\n\nconst EmptyInfo = ({\n  customStyleContainer,\n  title,\n  subtitle,\n  costomTextTitleStyle,\n  costomTextSubtitleStyle,\n}) => {\n  return (\n    <div className={style.empty_container} style={customStyleContainer}>\n      {title && <h6 style={costomTextTitleStyle}>{title}</h6>}\n      {subtitle && <p style={costomTextSubtitleStyle}>{subtitle}</p>}\n    </div>\n  );\n};\n\nexport default EmptyInfo;\n","import React from \"react\";\nimport styles from \"./QvipleLoader.module.css\";\nconst QvipleLoading = ({ status }) => {\n  return (\n    <div className={styles.loaderGif}>\n      <img\n        src={\n          status === \"white\"\n            ? \"/images/loader/loader-bg-white.gif\"\n            : \"/images/loader/loader.gif\"\n        }\n        alt=\"for load an items\"\n      />\n    </div>\n  );\n};\n\nexport default QvipleLoading;\n","// import FormFileView from \"../../../../optimized/Ui/Input/FormFileView\";\nimport dayjs from \"dayjs\";\nimport { localTimeFormat } from \"../../../../optimized/Utils/Functions/localTime\";\nimport style from \"../../../../optimized/UserStaffMember/FinanceManager/Income/Income.module.css\";\nimport { useTranslation } from \"react-i18next\";\nimport { Fragment } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { imageShowUrl } from \"../../../../services/BaseUrl\";\nconst StudentMessageActivity = ({ data }) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  return (\n    <Link\n      to={`/q/${params.username}/notifications?a=student-messaage-detail`}\n      state={{\n        data: data,\n      }}\n    >\n      <div className={style.student_message_container}>\n        <div\n          className={style.student_message_container_inner}\n          style={{\n            width: \"100%\",\n          }}\n        >\n          <div className={style.usm_institute_container}>\n            <div className={style.usm_institute}>\n              <img\n                src={\n                  data?.institute?.insProfilePhoto\n                    ? `${imageShowUrl}/${data?.institute?.insProfilePhoto}`\n                    : \"/images/ins_default_profile.svg\"\n                }\n                alt=\"icon\"\n              />\n              <div className={style.student_message_container_inner}>\n                <h6>{data?.institute?.insName ?? \"ALD University\"}</h6>\n                <p>\n                  {dayjs(data?.created_at).format(\"DD MMM, YYYY\")}\n                  {\", \"}\n                  {localTimeFormat(data?.created_at, \"LT\")}\n                </p>\n              </div>\n            </div>\n            {data.message_mode === \"STUDENT_REMINDER\" ? (\n              <div className={style.student_message_container_inner}>\n                <p\n                  style={{\n                    marginTop: \"0.4rem\",\n                  }}\n                >\n                  {t(\"os_fees_reminder\")}\n                </p>\n              </div>\n            ) : null}\n          </div>\n          {/* <p>{t(\"title\")}</p> */}\n          <h6\n            style={{\n              whiteSpace: \"break-spaces\",\n            }}\n          >\n            {data?.message_title\n              ? data?.message_title?.split(\" \")?.map((st, index) =>\n                  st?.includes(\"http://\") || st?.includes(\"https://\") ? (\n                    <a\n                      key={index}\n                      href={`${st}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      style={{\n                        color: \"#436dfa\",\n                        textDecoration: \"none\",\n                      }}\n                    >\n                      {st}{\" \"}\n                    </a>\n                  ) : (\n                    <Fragment key={index}>{st} </Fragment>\n                  )\n                )\n              : \"\"}\n          </h6>\n        </div>\n        {/* <div className={style.student_message_container_inner}>\n          <p>\n            {dayjs(data?.created_at).format(\"DD MMM, YYYY\")}\n            {\", \"}\n            {localTimeFormat(data?.created_at, \"LT\")}\n          </p>\n        </div> */}\n      </div>\n    </Link>\n\n    // <div\n    //   className={\n    //     activity?.notifyReadStatus === \"Unread\"\n    //       ? `${style.item} ${style.item_active}`\n    //       : style.item\n    //   }\n    // >\n    //   <div className={style.eachItem}>\n    //     <div className={style.eachItemleft}>\n    //       <img\n    //         src={\n    //           activity?.notifyByStaffPhoto?.staffProfilePhoto\n    //             ? `${imageShowUrl}/${activity?.notifyByStaffPhoto?.staffProfilePhoto}`\n    //             : \"/images/ins_default_profile.svg\"\n    //         }\n    //         alt=\"student avatar\"\n    //       />\n    //       <p>{activity?.notifyContent}</p>\n    //     </div>\n    //     <div className={style.text}>\n    //       <p>{moment(activity?.notifyTime).format(\"LT\")}</p>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n};\n\nexport default StudentMessageActivity;\n","import React from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useGetNotificationAllStudentMessage } from \"../../../../hooks/member_tab/activity-api\";\nimport { useSelector } from \"react-redux\";\nimport QvipleLoading from \"../../../../Loader/QvipleLoading\";\nimport EmptyInfo from \"../../../../Loader/EmptyInfo\";\nimport style from \"../Activity/Activity.module.css\";\nimport StudentMessageActivity from \"../Activity/StudentMessageActivity\";\n\nconst StudentMessage = () => {\n  const [allActivity, setAllActivity] = React.useState([]);\n  const [ref, inView] = useInView();\n  const [state, setState] = React.useState(true);\n  const [page, setPage] = React.useState(1);\n  const ids = useSelector((state) => state.idChange);\n  const [showingDataLoading, setShowingDataLoading] = React.useState(true);\n\n  const {\n    getNotificationAllStudentMessage,\n    getNotificationAllStudentMessageRefetch,\n  } = useGetNotificationAllStudentMessage({\n    data: {\n      uid: ids?.id,\n      page: page,\n      limit: 10,\n    },\n    skip: !ids?.id,\n  });\n\n  React.useEffect(() => {\n    if (ids?.id) {\n      setShowingDataLoading(true);\n      getNotificationAllStudentMessageRefetch();\n    }\n  }, [ids?.id, page, getNotificationAllStudentMessageRefetch]);\n  React.useEffect(() => {\n    if (inView && state) setPage((page) => page + 1);\n  }, [inView, state]);\n\n  React.useEffect(() => {\n    if (getNotificationAllStudentMessage?.all_message) {\n      const uniqueDublicate = [\n        ...allActivity,\n        ...getNotificationAllStudentMessage?.all_message,\n      ];\n      const uniqueRefind = [\n        ...new Set(uniqueDublicate.map(JSON.stringify)),\n      ].map(JSON.parse);\n      setAllActivity(uniqueRefind);\n      setShowingDataLoading(false);\n    } else if (getNotificationAllStudentMessage?.all_message?.length === 0)\n      setShowingDataLoading(false);\n    else {\n    }\n    //for next api is call or not dashboard\n    if (getNotificationAllStudentMessage?.all_message.length === 10)\n      setState(true);\n    else setState(false);\n  }, [getNotificationAllStudentMessage?.all_message]);\n  return (\n    <div className={style.activity_caontainer}>\n      {allActivity?.map((data, index) =>\n        allActivity?.length === index + 1 ? (\n          <div ref={ref} key={index}>\n            <StudentMessageActivity data={data} />\n          </div>\n        ) : (\n          <StudentMessageActivity data={data} key={index} />\n        )\n      )}\n\n      {showingDataLoading && <QvipleLoading />}\n      {!showingDataLoading &&\n        !getNotificationAllStudentMessage?.all_message?.length && (\n          <EmptyInfo\n            customStyleContainer={{\n              marginTop: \"5rem\",\n              height: \"inherit\",\n            }}\n            title={\"No any message found\"}\n          />\n        )}\n    </div>\n  );\n};\n\nexport default StudentMessage;\n","import localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport dayjs from \"dayjs\";\n\nexport const localTimeFormat = (value, format) => {\n  dayjs.extend(localizedFormat);\n  return dayjs(value).format(format);\n};\n\nexport const localTimeCompare = (method, type, value) => {\n  let res = dayjs()[method](`${dayjs(value)?.format(\"YYYY-MM-DD\")}`, type);\n  return res;\n};\n","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_localizedFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)}}}));","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Activity_item__SYfQQ\",\"item_active\":\"Activity_item_active__L-dfD\",\"text\":\"Activity_text__UVUHS\",\"textlast\":\"Activity_textlast__X2jdR\",\"btn\":\"Activity_btn__OymPs\",\"eachItem\":\"Activity_eachItem__bH2hN\",\"eachItemleft\":\"Activity_eachItemleft__epg0F\",\"seating_container\":\"Activity_seating_container__a2ql3\",\"you_have_a_supervision_on\":\"Activity_you_have_a_supervision_on__WXb2c\",\"seating_block_container_top\":\"Activity_seating_block_container_top__XF1oh\",\"view_more_btn\":\"Activity_view_more_btn__0EUNZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"right\":\"Income_right__XnzYj\",\"rightHead\":\"Income_rightHead__1rLc6\",\"rightBody\":\"Income_rightBody__fGEC5\",\"income_detail\":\"Income_income_detail__IWoJa\",\"detailTop\":\"Income_detailTop__4JXuu\",\"detailTopMid\":\"Income_detailTopMid__yc2yv\",\"modal_container\":\"Income_modal_container__HiGr+\",\"modal_container_outer_header\":\"Income_modal_container_outer_header__F9c7X\",\"modal_container_header\":\"Income_modal_container_header__td-Fb\",\"card_container\":\"Income_card_container__ewKhQ\",\"card_container_image\":\"Income_card_container_image__5XloP\",\"card_container_inner\":\"Income_card_container_inner__JBmxr\",\"admission_fees_row\":\"Income_admission_fees_row__MPJCs\",\"close_icon\":\"Income_close_icon__Ozq4u\",\"student_message_container\":\"Income_student_message_container__8KnPc\",\"student_message_container_inner\":\"Income_student_message_container_inner__mRYpD\",\"usm_institute_container\":\"Income_usm_institute_container__4LkYt\",\"usm_institute\":\"Income_usm_institute__hlzdF\",\"date_select\":\"Income_date_select__D3VkU\",\"gsf_star_container\":\"Income_gsf_star_container__7gdUs\",\"afsi_container\":\"Income_afsi_container__7u06w\",\"days_container\":\"Income_days_container__xq2RX\",\"days_container_child\":\"Income_days_container_child__E30h2\",\"days_container_child_active\":\"Income_days_container_child_active__y6eWZ\",\"spsc_student\":\"Income_spsc_student__2-qo4\",\"pdf_modal_container\":\"Income_pdf_modal_container__6511u\"};","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","customStyleContainer","title","subtitle","costomTextTitleStyle","costomTextSubtitleStyle","_jsxs","className","style","empty_container","children","_jsx","status","styles","loaderGif","src","alt","_data$institute","_data$institute2","_data$institute$insNa","_data$institute3","_data$message_title","_data$message_title$s","data","t","useTranslation","params","useParams","Link","to","concat","username","state","student_message_container","student_message_container_inner","width","usm_institute_container","usm_institute","institute","insProfilePhoto","imageShowUrl","insName","dayjs","created_at","format","localTimeFormat","message_mode","marginTop","whiteSpace","message_title","split","map","st","index","includes","href","target","rel","color","textDecoration","Fragment","StudentMessage","_getNotificationAllSt2","allActivity","setAllActivity","React","ref","inView","useInView","setState","page","setPage","ids","useSelector","idChange","showingDataLoading","setShowingDataLoading","getNotificationAllStudentMessage","getNotificationAllStudentMessageRefetch","useGetNotificationAllStudentMessage","uid","id","limit","skip","_getNotificationAllSt","all_message","uniqueDublicate","uniqueRefind","Set","JSON","stringify","parse","length","activity_caontainer","StudentMessageActivity","QvipleLoading","EmptyInfo","height","value","localizedFormat","localTimeCompare","method","type","_dayjs","module","exports","e","LTS","LT","L","LL","LLL","LLLL","o","n","r","prototype","i","en","formats","this","$locale","replace","toUpperCase","slice","call","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","triggerOnce","initialInView","onChange","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}