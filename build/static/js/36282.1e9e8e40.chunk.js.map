{"version":3,"file":"static/js/36282.1e9e8e40.chunk.js","mappings":"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","sources":["optimized/InstituteMember/InstituteFeedback/StudentFeedback/StudentFeedbackAllStaffCard.jsx","optimized/InstituteMember/InstituteFeedback/StudentFeedback/StudentFeedbackAllStaff.jsx","optimized/Loader/Loading.jsx","optimized/Utils/EmptyMessage/EmptyMessage.jsx","optimized/Utils/Functions/debounce.js","optimized/Utils/Functions/nextPage.js","webpack://mithkal-qviple/./src/optimized/InstituteMember/InstituteFeedback/InstituteFeedback.module.css?c578","webpack://mithkal-qviple/./src/optimized/Utils/Utils.module.css?d850","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { assestsFeedUrl } from \"../../../Services/UrlConfig/AssestsBaseUrl\";\nimport { useTranslation } from \"react-i18next\";\nimport style from \"../InstituteFeedback.module.css\";\nimport { Suspense, lazy, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { imageShowUrl } from \"../../../Services/UrlConfig/BaseUrl\";\nimport QvipleLoader from \"../../../Loader/QvipleLoader\";\nconst OneStaffAnalytic = lazy(() =>\n  import(\"./OneStaffAnalytic/OneStaffAnalytic\")\n);\n\nconst StudentFeedbackAllStaffCard = ({ staff }) => {\n  const { t } = useTranslation();\n  const getQuery = useLocation();\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    if (staff?.student_feedback?.[0]?.analytic_evaluation)\n      setOpen((pre) => !pre);\n  };\n  const onToggle = () => {\n    setOpen((pre) => !pre);\n  };\n\n  // console.info(\"getQuery\", getQuery);\n  return (\n    <>\n      <div className={style.sf_card} onClick={onOpen}>\n        <div\n          className={style.sf_card_contatiner}\n          style={{\n            justifyContent: \"space-between\",\n            width: \"100%\",\n          }}\n        >\n          <div className={style.sf_card_contatiner}>\n            <img\n              src={\n                staff?.staffProfilePhoto\n                  ? `${imageShowUrl}/${staff?.staffProfilePhoto}`\n                  : `${assestsFeedUrl}/feed-user-avatar.svg`\n              }\n              loading=\"lazy\"\n              alt=\"avatar\"\n            />\n\n            <div className={style.sf_card_contatiner_inner}>\n              <h6>\n                {`${staff?.staffFirstName ?? \"\"} ${\n                  staff?.staffMiddleName ?? \"\"\n                } ${staff?.staffLastName ?? \"\"}`}\n              </h6>\n              <p>\n                {t(\"employee_code\")}\n                {\": \"}\n                {staff?.staffROLLNO ?? \"\"}\n                {/* {staff?.staff_emp_code ?? \"\"} */}\n              </p>\n            </div>\n          </div>\n          {staff?.student_feedback?.[0]?.analytic_evaluation ? (\n            <div className={style.sf_card_contatiner_inner}>\n              <h6>\n                <span\n                  style={{\n                    fontWeight: \"400\",\n                  }}\n                >\n                  {t(\"total_feedback\")}\n                </span>\n                {\": \"}\n                {getInPercentage(\n                  staff?.student_feedback?.[0]?.subject_analytic\n                )}\n                %\n              </h6>\n              <p>\n                {t(\"given_feedback\")}\n                {\": \"}\n                {staff?.student_feedback?.[0]?.student_give_feedback_count ?? 0}\n              </p>\n            </div>\n          ) : null}\n        </div>\n      </div>\n      <Suspense fallback={<QvipleLoader />}>\n        {open && (\n          <OneStaffAnalytic\n            onClose={onToggle}\n            ifid={getQuery.state?.ifid}\n            sid={staff?._id}\n            staff={staff}\n          />\n        )}\n      </Suspense>\n    </>\n  );\n};\n\nexport default StudentFeedbackAllStaffCard;\n\nconst getInPercentage = (list) => {\n  if (list?.length > 0) {\n    let sum = 0;\n    for (let lt of list) {\n      sum += lt?.feedback_percentage;\n    }\n    sum = Math.floor(sum / list?.length);\n    return sum;\n  }\n  return 0;\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { assestsNavbarUrl } from \"../../../Services/UrlConfig/AssestsBaseUrl\";\nimport QvipleLoader from \"../../../Loader/QvipleLoader\";\nimport Loading from \"../../../Loader/Loading\";\nimport EmptyMessage from \"../../../Utils/EmptyMessage/EmptyMessage\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useFeedbackSubjectTeacherList } from \"../../../Hooks/ApiHooks/InstituteFeedback/institute-feedback-api\";\nimport { nextPage } from \"../../../Utils/Functions/nextPage\";\nimport { customDebounce } from \"../../../Utils/Functions/debounce\";\nimport { useTranslation } from \"react-i18next\";\nimport style from \"../../../UserStaffMember/FinanceManager/FinanceManager.module.css\";\nimport StudentFeedbackAllStaffCard from \"./StudentFeedbackAllStaffCard\";\nconst StudentFeedbackAllStaff = ({ instituteId, ifid }) => {\n  const { t } = useTranslation();\n  const [search, setSearch] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [state, setState] = useState(true);\n  const [ref, inView] = useInView({ skip: search });\n\n  const { feedbackSubjectTeacherList, feedbackSubjectTeacherListLoading } =\n    useFeedbackSubjectTeacherList({\n      data: {\n        ifid: ifid,\n        page: page,\n        limit: 10,\n        search: search,\n      },\n      skip: !ifid,\n    });\n  useEffect(() => {\n    if (inView && state) setPage((page) => page + 1);\n  }, [inView, state]);\n  useEffect(() => {\n    if (feedbackSubjectTeacherList?.list?.length) {\n      let obj = nextPage(feedbackSubjectTeacherList?.list?.length);\n      setState(() => obj);\n    }\n  }, [feedbackSubjectTeacherList?.list]);\n\n  const onDebounce = useCallback(\n    customDebounce((val) => {\n      setPage(() => 1);\n      setSearch(val);\n    }, 1500),\n    []\n  );\n\n  const onSearchEvent = (e) => {\n    if (e.target.value) onDebounce(e.target.value);\n    else {\n      setPage(() => 1);\n      setSearch(\"\");\n    }\n  };\n\n  return (\n    <>\n      <div className={style.fm_header_container}>\n        <div className={style.fm_search_full}>\n          <section className={style.fm_search_full_container}>\n            <div className={style.fm_search_full_container_inner}>\n              <img\n                className={style.fm_search_full_icon}\n                alt=\"search icon\"\n                src={`${assestsNavbarUrl}/navbar-search.svg`}\n              />\n              <input\n                type=\"text\"\n                placeholder={t(\"search\")}\n                onChange={onSearchEvent}\n              />\n            </div>\n          </section>\n        </div>\n      </div>\n      {feedbackSubjectTeacherList?.list?.map((staff, index) =>\n        feedbackSubjectTeacherList?.list?.length === index + 1 ? (\n          <div key={staff?._id} ref={ref}>\n            <StudentFeedbackAllStaffCard staff={staff} />\n          </div>\n        ) : (\n          <StudentFeedbackAllStaffCard staff={staff} key={staff?._id} />\n        )\n      )}\n      {feedbackSubjectTeacherListLoading ? (\n        search ? (\n          <QvipleLoader />\n        ) : (\n          <Loading />\n        )\n      ) : search ? (\n        feedbackSubjectTeacherList?.list?.length === 0 && (\n          <EmptyMessage\n            title=\"No staff found related this search.\"\n            customStyleContainer={{\n              marginTop: \"10rem\",\n            }}\n          />\n        )\n      ) : (\n        feedbackSubjectTeacherList?.list?.length === 0 && (\n          <EmptyMessage\n            title=\"No staff.\"\n            customStyleContainer={{\n              marginTop: \"10rem\",\n            }}\n          />\n        )\n      )}\n    </>\n  );\n};\n\nexport default StudentFeedbackAllStaff;\n","import { assestsLoadingUrl } from \"../Services/UrlConfig/AssestsBaseUrl\";\nimport style from \"./Loader.module.css\";\nconst Loading = ({ isGrey }) => {\n  return (\n    <div className={style.q_loading}>\n      <img\n        src={\n          isGrey\n            ? `${assestsLoadingUrl}/loading-grey.gif`\n            : `${assestsLoadingUrl}/loading.gif`\n        }\n        alt=\"loading icon\"\n      />\n    </div>\n  );\n};\n\nexport default Loading;\n","import style from \"../Utils.module.css\";\nconst EmptyMessage = ({\n  title,\n  subtitle,\n  customStyleContainer,\n  costomTextTitleStyle,\n  costomTextSubtitleStyle,\n}) => {\n  return (\n    <div className={style.empty_container} style={customStyleContainer}>\n      {title && <h6 style={costomTextTitleStyle}>{title}</h6>}\n      {subtitle && <p style={costomTextSubtitleStyle}>{subtitle}</p>}\n    </div>\n  );\n};\n\nexport default EmptyMessage;\n","export const customDebounce = (func, delay) => {\n  let timer;\n  return function () {\n    let self = this;\n    let args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(self, args);\n    }, delay);\n  };\n};\n","export const nextPage = (args) => {\n  if (args % 10 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sf_card\":\"InstituteFeedback_sf_card__dLh8P\",\"sf_card_hover\":\"InstituteFeedback_sf_card_hover__BqLqV\",\"iadcc_card_hover\":\"InstituteFeedback_iadcc_card_hover__wMuhW\",\"sf_card_contatiner\":\"InstituteFeedback_sf_card_contatiner__2Zbiq\",\"sf_card_contatiner_inner\":\"InstituteFeedback_sf_card_contatiner_inner__sjsCw\",\"sf_card_active\":\"InstituteFeedback_sf_card_active__ujoaz\",\"ifq_card\":\"InstituteFeedback_ifq_card__vFRNw\",\"ifq_card_inner\":\"InstituteFeedback_ifq_card_inner__65kmp\",\"ifqo_cantainer\":\"InstituteFeedback_ifqo_cantainer__YlkE-\",\"ifqo_cantainer_student\":\"InstituteFeedback_ifqo_cantainer_student__WsWho\",\"ifqocs_active\":\"InstituteFeedback_ifqocs_active__Wa3As\",\"osa_card\":\"InstituteFeedback_osa_card__48+nw\",\"gsf_contatiner\":\"InstituteFeedback_gsf_contatiner__x3ydz\",\"gsf_star_container\":\"InstituteFeedback_gsf_star_container__0Mu56\",\"igc_card\":\"InstituteFeedback_igc_card__cCB4r\",\"sfcc_input\":\"InstituteFeedback_sfcc_input__VxOy3\"};","// extracted by mini-css-extract-plugin\nexport default {\"notify_backdrop\":\"Utils_notify_backdrop__saL0O\",\"notify_overlay\":\"Utils_notify_overlay__GtPc5\",\"notify_hide_overlay\":\"Utils_notify_hide_overlay__MYvkC\",\"notify_overlay_animation\":\"Utils_notify_overlay_animation__pcASm\",\"notify_hide_overlay_animation\":\"Utils_notify_hide_overlay_animation__UKRcG\",\"notify_container\":\"Utils_notify_container__O8DBA\",\"notify_message\":\"Utils_notify_message__PHwKo\",\"notify_close\":\"Utils_notify_close__IwjyA\",\"modal_backdrop\":\"Utils_modal_backdrop__WBquw\",\"modal_overlay\":\"Utils_modal_overlay__Yy-AV\",\"modal_hide_overlay\":\"Utils_modal_hide_overlay__elt3A\",\"navbar_modal_hide_overlay\":\"Utils_navbar_modal_hide_overlay__yqj5q\",\"navbar_modal_overlay\":\"Utils_navbar_modal_overlay__6ub8g\",\"modal_hide_overlay_animation\":\"Utils_modal_hide_overlay_animation__d3TNp\",\"navbar_modal_overlay_animation\":\"Utils_navbar_modal_overlay_animation__Ypk9u\",\"navbar_modal_hide_overlay_animation\":\"Utils_navbar_modal_hide_overlay_animation__QLEse\",\"empty_container\":\"Utils_empty_container__-VyCI\",\"modal_overlay_animation\":\"Utils_modal_overlay_animation__zkjsk\"};","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["OneStaffAnalytic","lazy","_ref","_staff$staffFirstName","_staff$staffMiddleNam","_staff$staffLastName","_staff$staffROLLNO","_staff$student_feedba3","_staff$student_feedba4","_staff$student_feedba5","_staff$student_feedba6","_staff$student_feedba7","_staff$student_feedba8","_staff$student_feedba9","_getQuery$state","staff","t","useTranslation","getQuery","useLocation","open","setOpen","useState","_jsxs","_Fragment","children","_jsx","className","style","sf_card","onClick","onOpen","_staff$student_feedba","_staff$student_feedba2","student_feedback","analytic_evaluation","pre","sf_card_contatiner","justifyContent","width","src","staffProfilePhoto","concat","imageShowUrl","assestsFeedUrl","loading","alt","sf_card_contatiner_inner","staffFirstName","staffMiddleName","staffLastName","staffROLLNO","fontWeight","getInPercentage","subject_analytic","student_give_feedback_count","Suspense","fallback","QvipleLoader","onClose","onToggle","ifid","state","sid","_id","list","length","sum","lt","feedback_percentage","Math","floor","_feedbackSubjectTeach3","_feedbackSubjectTeach5","_feedbackSubjectTeach6","instituteId","search","setSearch","page","setPage","setState","ref","inView","useInView","skip","feedbackSubjectTeacherList","feedbackSubjectTeacherListLoading","useFeedbackSubjectTeacherList","data","limit","useEffect","_feedbackSubjectTeach","_feedbackSubjectTeach2","obj","nextPage","onDebounce","useCallback","customDebounce","val","fm_header_container","fm_search_full","fm_search_full_container","fm_search_full_container_inner","fm_search_full_icon","assestsNavbarUrl","type","placeholder","onChange","e","target","value","map","index","_feedbackSubjectTeach4","StudentFeedbackAllStaffCard","Loading","EmptyMessage","title","customStyleContainer","marginTop","isGrey","q_loading","assestsLoadingUrl","subtitle","costomTextTitleStyle","costomTextSubtitleStyle","empty_container","func","delay","timer","self","this","args","arguments","clearTimeout","setTimeout","apply","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","triggerOnce","initialInView","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}