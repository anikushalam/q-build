{"version":3,"file":"static/js/45613.66d9262f.chunk.js","mappings":"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","sources":["webpack://mithkal-qviple/./src/Profile/Institute/Pages/Follower.module.css?df88","Profile/Institute/Pages/Follower.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Follower_container__yNEKd\",\"card\":\"Follower_card__w1-Rz\",\"cardImage\":\"Follower_cardImage__nxGp9\",\"username\":\"Follower_username__utfHo\",\"name\":\"Follower_name__Jmj8E\",\"unfollow\":\"Follower_unfollow__WR3uC\",\"unfollowText\":\"Follower_unfollowText__gxGo5\"};","import React, { useState, useEffect } from \"react\";\nimport style from \"./Follower.module.css\";\nimport { useInView } from \"react-intersection-observer\";\nimport { imageShowUrl } from \"../../../services/BaseUrl\";\nimport { useInstituteFollowersArray } from \"../../../hooks/dashboard/dashboard-api\";\nimport { useSelector } from \"react-redux\";\n\nconst Follower = () => {\n  const id = useSelector((state) => state.idChange.id);\n  const [allFollowers, setAllFollowers] = useState([]);\n  const [ref, inView] = useInView();\n  const [state, setState] = useState(true);\n  const [page, setPage] = useState(1);\n\n  const { instituteFollowersArray, instituteFollowersArrayRefetch } =\n    useInstituteFollowersArray({\n      data: {\n        id: id,\n        page: page,\n        limit: 10,\n      },\n      skip: !id,\n    });\n\n  useEffect(() => {\n    if (id) instituteFollowersArrayRefetch();\n  }, [id, page, instituteFollowersArrayRefetch]);\n  useEffect(() => {\n    if (inView && state) setPage((page) => page + 1);\n  }, [inView, state]);\n\n  useEffect(() => {\n    if (\n      instituteFollowersArray?.iFollowers?.length ||\n      instituteFollowersArray?.uFollowers?.length\n    ) {\n      const dublicates = [\n        ...allFollowers,\n        ...instituteFollowersArray?.iFollowers,\n        ...instituteFollowersArray?.uFollowers,\n      ];\n      const uniqueRefind = [...new Set(dublicates.map(JSON.stringify))].map(\n        JSON.parse\n      );\n      setAllFollowers(uniqueRefind);\n    }\n    //for next api is call or not dashboard\n    // if (subjectMcqQuestion?.questions.length === 10) setState(true);\n    // else setState(false);\n  }, [\n    instituteFollowersArray?.iFollowers,\n    instituteFollowersArray?.uFollowers,\n  ]);\n\n  return (\n    <div className={`${style.container}`}>\n      {allFollowers?.map((ft, index) =>\n        allFollowers?.length === index + 1 ? (\n          <div className={style.card} key={index} ref={ref}>\n            <img\n              className={style.cardImage}\n              src={\n                ft?.photoId !== \"1\"\n                  ? `${imageShowUrl}/${ft?.insProfilePhoto || ft?.profilePhoto}`\n                  : \"/images/avatar-icon.png\"\n              }\n              alt=\"\"\n            />\n            <p className={style.username}>\n              {ft && ft.name ? ft.name : ft.username ? ft.username : \"\"}\n            </p>\n            <p className={style.name}>\n              {ft && ft.insName\n                ? ft.insName\n                : ft.userLegalName\n                ? ft.userLegalName\n                : \"\"}\n            </p>\n            {/* <div\n              className={style.unfollow}\n              onClick={() => (ft.name ? onBlockInstitute(ft?._id) : () => {})}\n            >\n              <p className={style.unfollowText}>Block</p>\n            </div>\n            <div\n              className={style.unfollow}\n              onClick={() => (ft.name ? onUnblockInstitute(ft?._id) : () => {})}\n            >\n              <p className={style.unfollowText}>Unblock</p>\n            </div> */}\n          </div>\n        ) : (\n          <div className={style.card} key={index}>\n            <img\n              className={style.cardImage}\n              src={\n                ft?.photoId !== \"1\"\n                  ? `${imageShowUrl}/${ft?.insProfilePhoto || ft?.profilePhoto}`\n                  : \"/images/avatar-icon.png\"\n              }\n              alt=\"\"\n            />\n            <p className={style.username}>\n              {ft && ft.name ? ft.name : ft.username ? ft.username : \"\"}\n            </p>\n            <p className={style.name}>\n              {ft && ft.insName\n                ? ft.insName\n                : ft.userLegalName\n                ? ft.userLegalName\n                : \"\"}\n            </p>\n            {/* <div\n              className={style.unfollow}\n              onClick={() => (ft.name ? onBlockInstitute(ft?._id) : () => {})}\n            >\n              <p className={style.unfollowText}>Block</p>\n            </div>\n            <div\n              className={style.unfollow}\n              onClick={() => (ft.name ? onUnblockInstitute(ft?._id) : () => {})}\n            >\n              <p className={style.unfollowText}>Unblock</p>\n            </div> */}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Follower;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Follower","id","useSelector","state","idChange","allFollowers","setAllFollowers","useState","ref","inView","useInView","setState","page","setPage","instituteFollowersArray","instituteFollowersArrayRefetch","useInstituteFollowersArray","data","limit","skip","useEffect","_instituteFollowersAr","_instituteFollowersAr2","iFollowers","length","uFollowers","dublicates","uniqueRefind","Set","map","JSON","stringify","parse","_jsx","className","concat","style","children","ft","index","_jsxs","src","photoId","imageShowUrl","insProfilePhoto","profilePhoto","alt","name","username","insName","userLegalName","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","triggerOnce","initialInView","onChange","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}