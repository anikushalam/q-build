{"version":3,"file":"static/js/73184.830c1f17.chunk.js","mappings":"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","sources":["Dashboard/InsDashboard/Components/Mainbody/Stats/Posts/PostTypeConfiguration.jsx","Dashboard/InsDashboard/Components/Mainbody/Stats/Posts/Posts.jsx","Loader/QvipleLoaderGif.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport QvipeLoaderGif from \"../../../../../../Loader/QvipleLoaderGif\";\nconst EachPost = React.lazy(() => import(\"./EachPost/EachPost\"));\nconst EachPoll = React.lazy(() => import(\"./EachPoll/EachPoll\"));\nconst EachQuestion = React.lazy(() => import(\"./EachQuestion/EachQuestion\"));\nconst EachPostAnnouncement = React.lazy(() =>\n  import(\"./EachPost/EachPostAnnouncement\")\n);\nconst PostTypeConfiguration = ({ post, profilePost, allPosts }) => {\n  const ids = useSelector((state) => state.idChange);\n  const [selectOptions, setSelectOptions] = useState(\n    !profilePost\n      ? [\"post_unfollow\"]\n      : ids?.id === post?.author\n      ? post?.postType === \"Poll\" || post?.postType === \"Question\"\n        ? [\"post_delete\", \"turn_off_comment\"]\n        : [\"post_visibility\", \"post_delete\", \"turn_off_comment\"]\n      : [\"post_unfollow\"]\n  );\n\n  useEffect(() => {\n    if (ids?.id === post?.author) {\n      post?.postType === \"Poll\" || post?.postType === \"Question\"\n        ? setSelectOptions([\"post_delete\", \"turn_off_comment\"])\n        : setSelectOptions([\n            \"post_visibility\",\n            \"post_delete\",\n            \"turn_off_comment\",\n          ]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [post?.author, ids?.id, post?.postType]);\n\n  return (\n    <React.Suspense fallback={<QvipeLoaderGif />}>\n      {post?.postType === \"Post\" && (\n        <EachPost\n          post={post}\n          profilePost={profilePost}\n          allPosts={allPosts}\n          selectOptions={selectOptions}\n        />\n      )}\n      {post?.postType === \"Poll\" && (\n        <EachPoll\n          post={post}\n          profilePost={profilePost}\n          allPosts={allPosts}\n          selectOptions={selectOptions}\n        />\n      )}\n      {post?.postType === \"Question\" && (\n        <EachQuestion\n          post={post}\n          profilePost={profilePost}\n          allPosts={allPosts}\n          selectOptions={selectOptions}\n        />\n      )}\n      {post?.postType === \"Announcement\" && (\n        <EachPostAnnouncement\n          post={post}\n          profilePost={profilePost}\n          allPosts={allPosts}\n          selectOptions={selectOptions}\n        />\n      )}\n    </React.Suspense>\n  );\n};\n\nexport default PostTypeConfiguration;\n","import React from \"react\";\nimport {\n  useDashAllPost,\n  useProfileAllPost,\n  useProfileAllSavedPost,\n  useProfileAllTagPost,\n} from \"../../../../../../Post/Institute/Components/post-api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useState, useEffect } from \"react\";\nimport { postChangeAction } from \"../../../../../../redux/store/post-slice\";\nimport { instituteAs } from \"../../../../../../constant/constant_value\";\nimport QvipeLoaderGif from \"../../../../../../Loader/QvipleLoaderGif\";\nimport PostTypeConfiguration from \"./PostTypeConfiguration\";\nimport { useTranslation } from \"react-i18next\";\nfunction Posts({ profilePost, profileSavedPost }) {\n  const { t } = useTranslation();\n  //for The redux storage and actions\n  const ids = useSelector((state) => state.idChange);\n  // const author = useSelector((state) => state.authChange);\n  const allPosts = useSelector((state) => state.postChange);\n  const dispatch = useDispatch();\n  // const insId = localStorage.getItem(\"user\");\n  const [load, setLoad] = useState(true);\n  //for the infinite scroll\n  const [ref, inView] = useInView();\n\n  //for the fetch more or not after seeing all post\n  const [state, setState] = useState(true);\n  const [profileState, setProfileState] = useState(true);\n  const [profileSavedState, setProfileSavedState] = useState(true);\n  const [profileTagState, setProfileTagState] = useState(true);\n\n  //for setting the next page to fetch data\n  const [page, setPage] = useState(1);\n  const [profilePage, setProfilePage] = useState(1);\n  const [profileSavedPage, setProfileSavedPage] = useState(1);\n  const [profileTagPage, setProfileTagPage] = useState(1);\n\n  //for the rtk query to call api\n  const { allDashPost, allDashPostRefetch } = useDashAllPost({\n    data: {\n      id: ids?.id,\n      page: page,\n      limit: 10,\n      viewAs: instituteAs,\n    },\n    skip: !ids?.id ? true : profilePost,\n  });\n  const { allProfilePost, allProfilePostRefetch } = useProfileAllPost({\n    data: {\n      id: ids?.searchProfile?.id ? ids?.searchProfile?.id : ids?.id,\n      page: profilePage,\n      limit: 10,\n      viewAs: instituteAs,\n    },\n    skip: !profilePost,\n  });\n\n  const { allProfileSavedPost, allProfileSavedPostRefetch } =\n    useProfileAllSavedPost({\n      data: {\n        id: ids?.id,\n        page: profileSavedPage,\n        limit: 10,\n        viewAs: instituteAs,\n      },\n      skip: !(profileSavedPost === \"save\") && !profilePost,\n    });\n\n  const { allProfileTagPost, allProfileTagPostRefetch } = useProfileAllTagPost({\n    data: {\n      id: ids?.id,\n      page: profileTagPage,\n      limit: 10,\n      viewAs: instituteAs,\n    },\n    skip: !(profileSavedPost === \"tag\") && !profilePost,\n  });\n\n  //for the infinite scroll then change the page\n  useEffect(() => {\n    if (inView && state && !profilePost) setPage((page) => page + 1);\n    else if (inView && profileState && profilePost)\n      setProfilePage((profilePage) => profilePage + 1);\n    else if (inView && profileSavedState && profileSavedPost === \"save\")\n      setProfileSavedPage((profileSavedPage) => profileSavedPage + 1);\n    else if (inView && profileTagState && profileSavedPost === \"tag\") {\n      setProfileTagPage((profileTagPage) => profileTagPage + 1);\n    } else {\n    }\n  }, [\n    inView,\n    state,\n    profileState,\n    profileSavedState,\n    profileTagState,\n    profilePost,\n    profileSavedPost,\n  ]);\n\n  //for the refteching after the page is reset\n  useEffect(() => {\n    if (!profilePost) allDashPostRefetch();\n    else if (profileSavedPost === \"my\") allProfilePostRefetch();\n    else if (profileSavedPost === \"save\") allProfileSavedPostRefetch();\n    else if (profileSavedPost === \"tag\") allProfileTagPostRefetch();\n    else {\n    }\n  }, [\n    page,\n    profilePage,\n    profileSavedPage,\n    profileTagPage,\n    profilePost,\n    profileSavedPost,\n    allDashPostRefetch,\n    allProfilePostRefetch,\n    allProfileSavedPostRefetch,\n    allProfileTagPostRefetch,\n  ]);\n\n  //for the action pperform each time when the new data is comming from api\n  useEffect(() => {\n    //dispatch actions\n    dispatch(\n      postChangeAction.addPost({\n        post: !profilePost\n          ? allDashPost?.post\n          : profileSavedPost === \"my\"\n          ? allProfilePost?.post\n          : profileSavedPost === \"save\"\n          ? allProfileSavedPost?.post\n          : allProfileTagPost?.post,\n        profilePost: !profilePost\n          ? \"dash\"\n          : profileSavedPost === \"my\"\n          ? \"profile\"\n          : profileSavedPost === \"save\"\n          ? \"saved\"\n          : \"taged\",\n        id: ids?.id,\n      })\n    );\n\n    //for next api is call or not dashboard\n    if (allDashPost?.post.length === 10) setState(true);\n    else setState(false);\n\n    //for next api is call or not profile\n    if (allProfilePost?.post.length === 10) setProfileState(true);\n    else setProfileState(false);\n\n    //for next api is call or not saved profile\n    if (allProfileSavedPost?.post.length === 10) setProfileSavedState(true);\n    else setProfileSavedState(false);\n\n    //for next api is call or not tag profile\n    if (allProfileTagPost?.post.length === 10) setProfileTagState(true);\n    else setProfileTagState(false);\n  }, [\n    allDashPost?.post,\n    allProfilePost?.post,\n    allProfileSavedPost?.post,\n    allProfileTagPost?.post,\n    dispatch,\n    profilePost,\n    profileSavedPost,\n    ids?.id,\n  ]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoad(false);\n    }, 5000);\n  }, []);\n  // console.info(\"this is all posts\", allPosts?.dashboardPosts);\n  return (\n    <div>\n      {!allPosts?.dashboardPosts?.length && !profilePost && load ? (\n        <QvipeLoaderGif />\n      ) : (\n        !profilePost &&\n        allPosts?.dashboardPosts?.map((data, index) =>\n          allPosts?.dashboardPosts?.length === index + 1 ? (\n            <div ref={ref} key={index}>\n              <PostTypeConfiguration\n                post={data}\n                profilePost={profilePost}\n                allPosts={allPosts?.dashboardPosts}\n              />\n            </div>\n          ) : (\n            <PostTypeConfiguration\n              key={index}\n              post={data}\n              profilePost={profilePost}\n              allPosts={allPosts?.dashboardPosts}\n            />\n          )\n        )\n      )}\n\n      {profilePost &&\n        profileSavedPost === \"my\" &&\n        (!allPosts?.profilePosts?.length && load ? (\n          <QvipeLoaderGif />\n        ) : (\n          allPosts?.profilePosts?.map((data, index) =>\n            allPosts?.profilePosts?.length === index + 1 ? (\n              <div ref={ref} key={index}>\n                <PostTypeConfiguration\n                  post={data}\n                  profilePost={profilePost}\n                  allPosts={[]}\n                />\n              </div>\n            ) : (\n              <PostTypeConfiguration\n                key={index}\n                post={data}\n                profilePost={profilePost}\n                allPosts={[]}\n              />\n            )\n          )\n        ))}\n\n      {profilePost &&\n        profileSavedPost === \"save\" &&\n        (!allPosts?.profileSavedPosts?.length && load ? (\n          <QvipeLoaderGif />\n        ) : (\n          allPosts?.profileSavedPosts?.map((data, index) =>\n            allPosts?.profileSavedPosts?.length === index + 1 ? (\n              <div ref={ref} key={index}>\n                <PostTypeConfiguration\n                  post={data}\n                  profilePost={profilePost}\n                  allPosts={[]}\n                />\n              </div>\n            ) : (\n              <PostTypeConfiguration\n                key={index}\n                post={data}\n                profilePost={profilePost}\n                allPosts={[]}\n              />\n            )\n          )\n        ))}\n\n      {profilePost &&\n        profileSavedPost === \"tag\" &&\n        (!allPosts?.profileTagedPosts?.length && load ? (\n          <QvipeLoaderGif />\n        ) : (\n          allPosts?.profileTagedPosts?.map((data, index) =>\n            allPosts?.profileTagedPosts?.length === index + 1 ? (\n              <div ref={ref} key={index}>\n                <PostTypeConfiguration\n                  post={data}\n                  profilePost={profilePost}\n                  allPosts={[]}\n                />\n              </div>\n            ) : (\n              <PostTypeConfiguration\n                key={index}\n                post={data}\n                profilePost={profilePost}\n                allPosts={[]}\n              />\n            )\n          )\n        ))}\n    </div>\n  );\n}\n\nexport default Posts;\n","import React from \"react\";\nimport styles from \"./QvipleLoader.module.css\";\n\nconst QvipeLoaderGif = () => {\n  return (\n    <div className={styles.loaderGif}>\n      <img src=\"/images/loader/loader.gif\" alt=\"for load an items\" />\n    </div>\n  );\n};\n\nexport default QvipeLoaderGif;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["EachPost","React","EachPoll","EachQuestion","EachPostAnnouncement","_ref","post","profilePost","allPosts","ids","useSelector","state","idChange","selectOptions","setSelectOptions","useState","id","author","postType","useEffect","_jsxs","fallback","_jsx","QvipeLoaderGif","children","_ids$searchProfile","_ids$searchProfile2","_allPosts$dashboardPo","_allPosts$dashboardPo2","_allPosts$profilePost","_allPosts$profilePost2","_allPosts$profileSave","_allPosts$profileSave2","_allPosts$profileTage","_allPosts$profileTage2","profileSavedPost","t","useTranslation","postChange","dispatch","useDispatch","load","setLoad","ref","inView","useInView","setState","profileState","setProfileState","profileSavedState","setProfileSavedState","profileTagState","setProfileTagState","page","setPage","profilePage","setProfilePage","profileSavedPage","setProfileSavedPage","profileTagPage","setProfileTagPage","allDashPost","allDashPostRefetch","useDashAllPost","data","limit","viewAs","instituteAs","skip","allProfilePost","allProfilePostRefetch","useProfileAllPost","searchProfile","allProfileSavedPost","allProfileSavedPostRefetch","useProfileAllSavedPost","allProfileTagPost","allProfileTagPostRefetch","useProfileAllTagPost","postChangeAction","addPost","length","setTimeout","dashboardPosts","map","index","_allPosts$dashboardPo3","PostTypeConfiguration","profilePosts","_allPosts$profilePost3","profileSavedPosts","_allPosts$profileSave3","profileTagedPosts","_allPosts$profileTage3","className","styles","loaderGif","src","alt","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","concat","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","triggerOnce","initialInView","onChange","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}