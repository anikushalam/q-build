{"version":3,"file":"static/js/62932.620fd2d6.chunk.js","mappings":"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","sources":["Profile/Institute/Pages/EditHead/SearchAffiliated.jsx","webpack://mithkal-qviple/./src/Search/Overlay.module.css?f865","Search/Overlay.jsx","Search/SearchModalBackdrop.jsx","Search/SearchModalWrapper.jsx","webpack://mithkal-qviple/./src/Department/Institute/AssignStaff/AssignStaffModal.module.css?96eb","webpack://mithkal-qviple/./src/Search/SearchHeader.module.css?739e","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n// import { useScrollbar } from \"../../../../Scroll/use-scroll\";\nimport { debounce } from \"lodash\";\nimport style from \"../../../../Department/Institute/AssignStaff/AssignStaffModal.module.css\";\nimport SearchModalWrapper from \"../../../../Search/SearchModalWrapper\";\nimport Overlay from \"../../../../Search/Overlay\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAffiliatedSearch } from \"../../../../hooks/plateform/plateform-api\";\nimport { imageShowUrl } from \"../../../../services/BaseUrl\";\n// import { useScrollbar } from \"../../../../Scroll/use-scroll\";\n\nconst SearchAffiliated = ({ onClose, selectMember }) => {\n  // const { hideScrollbar, showScrollbar } = useScrollbar();\n  // useEffect(() => {\n  //   hideScrollbar();\n  // }, []);\n\n  const [page, setPage] = useState(1);\n  const [state, setState] = useState(true);\n  const [ref, inView] = useInView();\n  const { t } = useTranslation();\n  const [search, setSearch] = useState(\"\");\n  const [supportMember, setSupportMember] = React.useState([]);\n  const { affiliatedSearch, affiliatedSearchRefetch } = useAffiliatedSearch({\n    search: search,\n    page: page,\n    limit: 10,\n  });\n\n  React.useEffect(() => {\n    affiliatedSearchRefetch();\n  }, [affiliatedSearchRefetch, page]);\n\n  useEffect(() => {\n    if (inView && state) setPage((page) => page + 1);\n  }, [inView, state]);\n\n  React.useEffect(() => {\n    if (affiliatedSearch?.manage) {\n      if (search) {\n        setSupportMember(affiliatedSearch?.manage);\n      } else {\n        const uniquePost = [...supportMember, ...affiliatedSearch?.manage];\n        const uniqueRefind = [...new Set(uniquePost.map(JSON.stringify))].map(\n          JSON.parse\n        );\n        setSupportMember(uniqueRefind);\n      }\n    }\n\n    //for next api is call or not dashboard\n    if (affiliatedSearch?.manage.length === 10) setState(true);\n    else setState(false);\n  }, [affiliatedSearch?.manage]);\n\n  useEffect(() => {\n    if (search) handleSearch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]);\n\n  const handleSearch = () => {\n    affiliatedSearchRefetch();\n  };\n\n  const deb = useCallback(\n    debounce((val) => setSearch(val), 500),\n    []\n  );\n\n  const searchHandler = (val) => {\n    deb(val);\n  };\n\n  const selectStaff = (val) => {\n    selectMember(val);\n    // showScrollbar();\n    onClose();\n  };\n\n  const onCloseHandler = () => {\n    // showScrollbar();\n    onClose();\n  };\n  return (\n    <>\n      <SearchModalWrapper onClose={onCloseHandler} />\n      <Overlay>\n        <div style={{ backgroundColor: \"#FAFAFA\", borderRadius: \"10px\" }}>\n          <div className={style.assign_title}>\n            <h5>{t(\"search_select\")}</h5>\n            <img\n              src=\"/images/close-post-icon.svg\"\n              onClick={onClose}\n              alt=\"staff assign pop close icon\"\n            />\n          </div>\n\n          <div className={style.assign_search_container}>\n            <input\n              type=\"text\"\n              placeholder={t(\"search\")}\n              className={style.assign_search_input}\n              // value={search}\n              onChange={(e) => searchHandler(e.target.value)}\n            />\n            <img src=\"/images/search-dash-icon.svg\" alt=\"search icon\" />\n          </div>\n\n          <div className={style.assign_show_list}>\n            {supportMember?.map((value, index) =>\n              supportMember?.length === index + 1 ? (\n                <div key={value._id} ref={ref}>\n                  <div\n                    className={style.assign_show_list_each}\n                    onClick={() => selectStaff(value)}\n                  >\n                    <img\n                      src={\n                        value?.photo\n                          ? `${imageShowUrl}/${value.photo}`\n                          : \"/images/member_tab/class/default_avatar.svg\"\n                      }\n                      alt=\"student profile avatar\"\n                    />\n                    <div className={style.assign_each_paragraph}>\n                      <h6>{value?.affiliation_name}</h6>\n                      <p>\n                        {t(\"aff_ins\")}{\" \"}\n                        {value?.affiliation_institute_approve_count}\n                      </p>\n                    </div>\n                  </div>\n                  <hr />\n                </div>\n              ) : (\n                <div key={value._id}>\n                  <div\n                    className={style.assign_show_list_each}\n                    onClick={() => selectStaff(value)}\n                  >\n                    <img\n                      src={\n                        value?.photo\n                          ? `${imageShowUrl}/${value.photo}`\n                          : \"/images/member_tab/class/default_avatar.svg\"\n                      }\n                      alt=\"student profile avatar\"\n                    />\n                    <div className={style.assign_each_paragraph}>\n                      <h6>{value?.affiliation_name}</h6>\n                      <p>\n                        {t(\"aff_ins\")}{\" \"}\n                        {value?.affiliation_institute_approve_count}\n                      </p>\n                    </div>\n                  </div>\n                  <hr />\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      </Overlay>\n    </>\n  );\n};\n\nexport default SearchAffiliated;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay_card\":\"Overlay_overlay_card__PAr1h\"};","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport style from \"./Overlay.module.css\";\nconst Overlay = ({ children, customStyle }) => {\n  return (\n    <>\n      {ReactDom.createPortal(\n        <div className={style.overlay_card} style={{ ...customStyle }}>\n          {children}\n        </div>,\n\n        document.getElementById(\"overlay\")\n      )}\n    </>\n  );\n};\n\nexport default Overlay;\n","import React from \"react\";\nimport style from \"./SearchHeader.module.css\";\nconst SearchModalBackdrop = ({ onClose, customStyleBackdrop }) => {\n  return (\n    <div\n      className={style.search_backdrop}\n      style={{ ...customStyleBackdrop }}\n      onClick={onClose}\n    />\n  );\n};\n\nexport default SearchModalBackdrop;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport SearchModalBackdrop from \"./SearchModalBackdrop\";\nconst SearchModalWrapper = ({ onClose, customStyleBackdrop }) => {\n  return (\n    <>\n      {ReactDom.createPortal(\n        <SearchModalBackdrop\n          onClose={onClose}\n          customStyleBackdrop={customStyleBackdrop}\n        />,\n        document.getElementById(\"backdrop\")\n      )}\n    </>\n  );\n};\n\nexport default SearchModalWrapper;\n","// extracted by mini-css-extract-plugin\nexport default {\"assign_title\":\"AssignStaffModal_assign_title__4DGBV\",\"assign_search_container\":\"AssignStaffModal_assign_search_container__3x6RD\",\"assign_search_input\":\"AssignStaffModal_assign_search_input__rO3c7\",\"assign_show_list\":\"AssignStaffModal_assign_show_list__yHhf7\",\"assign_show_list_each\":\"AssignStaffModal_assign_show_list_each__ACUEw\",\"assign_each_paragraph\":\"AssignStaffModal_assign_each_paragraph__pMHTq\",\"universal_modal\":\"AssignStaffModal_universal_modal__czmpB\",\"is_mulitselect_container\":\"AssignStaffModal_is_mulitselect_container__0cPQ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"search_backdrop\":\"SearchHeader_search_backdrop__MsKpG\",\"search_card\":\"SearchHeader_search_card__-jNcg\",\"search_container\":\"SearchHeader_search_container__NS7Om\",\"search_container_text\":\"SearchHeader_search_container_text__bkolR\",\"searchIcon\":\"SearchHeader_searchIcon__J7cNp\",\"search_container_back\":\"SearchHeader_search_container_back__ZoXdV\"};","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","onClose","selectMember","page","setPage","useState","state","setState","ref","inView","useInView","t","useTranslation","search","setSearch","supportMember","setSupportMember","React","affiliatedSearch","affiliatedSearchRefetch","useAffiliatedSearch","limit","useEffect","manage","uniquePost","uniqueRefind","Set","map","JSON","stringify","parse","length","handleSearch","deb","useCallback","debounce","val","selectStaff","_jsxs","_Fragment","children","_jsx","SearchModalWrapper","onCloseHandler","Overlay","style","backgroundColor","borderRadius","className","assign_title","src","onClick","alt","assign_search_container","type","placeholder","assign_search_input","onChange","e","searchHandler","target","value","assign_show_list","index","assign_show_list_each","photo","concat","imageShowUrl","assign_each_paragraph","affiliation_name","affiliation_institute_approve_count","_id","customStyle","ReactDom","document","getElementById","customStyleBackdrop","search_backdrop","SearchModalBackdrop","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","triggerOnce","skip","initialInView","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}