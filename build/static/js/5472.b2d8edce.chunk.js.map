{"version":3,"file":"static/js/5472.b2d8edce.chunk.js","mappings":"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","sources":["optimized/Auth/AuthCardWrapper.jsx","optimized/Auth/Forget/InstituteSetForgetPassword.jsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport style from \"./Auth.module.css\";\nimport { useTranslation } from \"react-i18next\";\nimport CreateButton from \"../Ui/Button/CreateButton\";\n\nconst AuthCardWrapper = ({\n  title,\n  subTitle,\n  titleStyle,\n  subTitleStyle,\n  isCreate,\n  onCreate,\n  children,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className={style.auth_card_wrapper}>\n      {isCreate ? (\n        <div className={style.auth_create_container}>\n          <div>\n            <h6 className={style.auth_card_title} style={titleStyle}>\n              {title ? t(title) : t(\"hello\")}\n            </h6>\n            <h6 className={style.auth_card_subtitle} style={subTitleStyle}>\n              {subTitle ? subTitle : t(\"welcome_to_qviple\")}\n            </h6>\n          </div>\n\n          <CreateButton\n            label=\"create_new_account\"\n            customStyle={{\n              margin: \"0\",\n            }}\n            onAction={onCreate}\n          />\n        </div>\n      ) : (\n        <>\n          <h6 className={style.auth_card_title} style={titleStyle}>\n            {title ? t(title) : t(\"hello\")}\n          </h6>\n          <h6 className={style.auth_card_subtitle} style={subTitleStyle}>\n            {subTitle ? subTitle : t(\"welcome_to_qviple\")}\n          </h6>\n        </>\n      )}\n\n      {children}\n    </div>\n  );\n};\n\nexport default memo(AuthCardWrapper);\n","import { useState } from \"react\";\nimport GetStarted from \"../GetStarted\";\nimport AuthCardWrapper from \"../AuthCardWrapper\";\nimport { useTranslation } from \"react-i18next\";\nimport NotifyEvent from \"../../Utils/Snackbar/NotifyEvent\";\nimport AuthFormFieldWithIcon from \"../../Ui/Auth/AuthFormFieldWithIcon\";\nimport style from \"../Auth.module.css\";\nimport {\n  existingRequiredField,\n  requiredField,\n} from \"../../Validation/functions/checkingRequiredField\";\nimport { useAuthUserSetPassword } from \"../../Hooks/ApiHooks/Auth/auth-api\";\nimport { assestsAuthUrl } from \"../../Services/UrlConfig/AssestsBaseUrl\";\nimport ButtonWithTypeSubmit from \"../../Ui/Button/ButtonWithTypeSubmit\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { decryption } from \"../../Services/Encryption/decrypt\";\n\nconst InstituteSetForgetPassword = () => {\n  const { t } = useTranslation();\n  const getQuery = useLocation();\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    userPassword: \"\",\n    userRePassword: \"\",\n  });\n\n  const [disabled, setDisabled] = useState(false);\n  const [errorField, setErrorField] = useState(\"\");\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    msg: \"\",\n    variant: \"error\",\n  });\n  const [authUserSetPassword] = useAuthUserSetPassword();\n\n  const onChangeHandler = (e) => {\n    setState((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    let validation = requiredField(state);\n    if (existingRequiredField(validation) && getQuery.state?.uid) {\n      if (state.userPassword === state.userRePassword) {\n        setDisabled((pre) => !pre);\n        authUserSetPassword({\n          uid: getQuery.state?.uid,\n          password: state,\n        })\n          .then((res) => {\n            let response = decryption(res?.data?.encrypt);\n            if (response?.institute) {\n              navigate(\"/\");\n            } else {\n              setSnackbar({\n                msg: \"Invalid Change Password\",\n                open: true,\n                variant: \"error\",\n              });\n            }\n            setDisabled((pre) => !pre);\n          })\n          .catch((err) => {\n            setSnackbar({\n              msg: `Time out of request with reason ${err}`,\n              open: true,\n              variant: \"error\",\n            });\n            setDisabled((pre) => !pre);\n          });\n      } else {\n        setSnackbar({\n          msg: \"Please match your password and confirm password\",\n          open: true,\n          variant: \"error\",\n        });\n      }\n    } else {\n      setErrorField(validation);\n    }\n  };\n\n  return (\n    <GetStarted>\n      <AuthCardWrapper\n        title=\"change_password\"\n        subTitle={t(\"change_password_note\")}\n        subTitleStyle={{\n          fontSize: \"0.7rem\",\n        }}\n      >\n        <form onSubmit={onSubmitHandler} className={style.auth_login_form}>\n          <AuthFormFieldWithIcon\n            label={t(\"password\")}\n            placeholder={t(\"password_placeholder\")}\n            fieldIconUrl={`${assestsAuthUrl}/auth-password.svg`}\n            validate={errorField[\"userPassword\"]}\n            name=\"userPassword\"\n            value={state.userPassword}\n            onChange={onChangeHandler}\n            type=\"password\"\n            isPassword\n          />\n\n          <AuthFormFieldWithIcon\n            label={t(\"confirm_password\")}\n            placeholder={t(\"password_confirm_placeholder\")}\n            fieldIconUrl={`${assestsAuthUrl}/auth-password.svg`}\n            validate={errorField[\"userRePassword\"]}\n            name=\"userRePassword\"\n            value={state.userRePassword}\n            onChange={onChangeHandler}\n            type=\"password\"\n            isPassword\n          />\n\n          <ButtonWithTypeSubmit\n            type=\"submit\"\n            buttonText={t(\"submit\")}\n            customStyleButton={{\n              marginTop: \"5rem\",\n            }}\n          />\n\n          <NotifyEvent eventState={snackbar} eventStateHandler={setSnackbar} />\n        </form>\n      </AuthCardWrapper>\n    </GetStarted>\n  );\n};\n\nexport default InstituteSetForgetPassword;\n"],"names":["AuthCardWrapper","_ref","title","subTitle","titleStyle","subTitleStyle","isCreate","onCreate","children","t","useTranslation","_jsxs","className","style","auth_card_wrapper","auth_create_container","_jsx","auth_card_title","auth_card_subtitle","CreateButton","label","customStyle","margin","onAction","_Fragment","memo","getQuery","useLocation","navigate","useNavigate","_useState","useState","userPassword","userRePassword","_useState2","_slicedToArray","state","setState","_useState3","_useState4","setDisabled","_useState5","_useState6","errorField","setErrorField","_useState7","open","msg","variant","_useState8","snackbar","setSnackbar","_useAuthUserSetPasswo","useAuthUserSetPassword","authUserSetPassword","onChangeHandler","e","prev","_objectSpread","_defineProperty","target","name","value","GetStarted","fontSize","onSubmit","_getQuery$state","preventDefault","_getQuery$state2","validation","requiredField","existingRequiredField","uid","pre","password","then","res","_res$data","response","decryption","data","encrypt","institute","catch","err","concat","auth_login_form","AuthFormFieldWithIcon","placeholder","fieldIconUrl","assestsAuthUrl","validate","onChange","type","isPassword","ButtonWithTypeSubmit","buttonText","customStyleButton","marginTop","NotifyEvent","eventState","eventStateHandler"],"sourceRoot":""}