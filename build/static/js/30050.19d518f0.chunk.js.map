{"version":3,"file":"static/js/30050.19d518f0.chunk.js","mappings":"sKAEA,MAeA,EAfsBA,IAAiB,IAAhB,OAAEC,GAAQD,EAC/B,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAOC,UAAUC,UAC/BJ,EAAAA,EAAAA,KAAA,OACEK,IACa,UAAXN,EACI,qCACA,4BAENO,IAAI,uBAEF,C,0ECZV,SAAgB,KAAO,4BCAvB,EAAuB,mBAAvB,EAAmD,qB,gDCAnD,QAAuB,mBAAvB,EAAyF,mBAAzF,EAAuH,uBAAvH,EAAiL,uBAAjL,EAAuN,2B,mCC2BvN,QAxBA,SAAaR,GAA2B,IAA1B,MAAES,EAAK,aAAEC,GAAcV,EACnC,OAAOS,GACLE,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OAAKK,IAAI,6BAA6BC,IAAI,MAC1CG,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,UAAoB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,qBAE3BX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,cAIhDL,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OAAKK,IAAI,0BAA0BC,IAAI,MACvCN,EAAAA,EAAAA,KAAA,KAAGC,UAAWS,EAAeN,SAAc,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAE/CX,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAc,OAAKL,EAAU,KAAIN,UAC/BJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,YAIpD,E,eCpBA,MAqBA,EArB4BhB,IAAuB,IAADkB,EAAAC,EAAA,IAArB,aAAET,GAAcV,EAC3C,OACEW,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OACEK,IAC8C,OAAhC,OAAZG,QAAY,IAAZA,GAA8B,QAAlBQ,EAAZR,EAAcU,wBAAgB,IAAAF,OAAlB,EAAZA,EAAgCG,SAAe,GAAAJ,OACxCK,EAAAA,GAAY,KAAAL,OAAgB,OAAZP,QAAY,IAAZA,GAA8B,QAAlBS,EAAZT,EAAcU,wBAAgB,IAAAD,OAAlB,EAAZA,EAAgCI,iBACnD,kCAENf,IAAI,MAENN,EAAAA,EAAAA,KAAA,KAAAI,SAAgB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAEpBX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,YAE1C,E,eChBV,MAkCA,EAlCyBhB,IAAuB,IAADkB,EAAAC,EAAA,IAArB,aAAET,GAAcV,EACxC,MAAMwB,GAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAASH,eAE3D,OACEtB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CACHC,GAAE,MAAAZ,OAAQO,EAAaM,SAAQ,cAC/BlB,MAAO,CAAEmB,MAAO,QAMhBzB,UAEAK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OACEK,IAC8C,OAAhC,OAAZG,QAAY,IAAZA,GAA8B,QAAlBQ,EAAZR,EAAcU,wBAAgB,IAAAF,OAAlB,EAAZA,EAAgCG,SAAe,GAAAJ,OACxCK,EAAAA,GAAY,KAAAL,OAAgB,OAAZP,QAAY,IAAZA,GAA8B,QAAlBS,EAAZT,EAAcU,wBAAgB,IAAAD,OAAlB,EAAZA,EAAgCI,iBACnD,kCAENf,IAAI,MAENN,EAAAA,EAAAA,KAAA,KAAAI,SAAgB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAEpBX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,cAG3C,ECFX,EA5BsBhB,IAAuB,IAADkB,EAAAC,EAAA,IAArB,aAAET,GAAcV,EACrC,MAAMwB,GAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAASH,eAE3D,OACEtB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CACHC,GAAE,MAAAZ,OAAQO,EAAaM,SAAQ,cAC/BlB,MAAO,CAAEmB,MAAO,QAASzB,UAEzBK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OACEK,IAC2C,OAA7B,OAAZG,QAAY,IAAZA,GAA2B,QAAfQ,EAAZR,EAAcsB,qBAAa,IAAAd,OAAf,EAAZA,EAA6BG,SAAe,GAAAJ,OACrCK,EAAAA,GAAY,KAAAL,OAAgB,OAAZP,QAAY,IAAZA,GAA2B,QAAfS,EAAZT,EAAcsB,qBAAa,IAAAb,OAAf,EAAZA,EAA6Bc,cAChD,kCAENzB,IAAI,MAENN,EAAAA,EAAAA,KAAA,KAAAI,SAAgB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAEpBX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,cAG3C,ECaX,EAtC2BhB,IAAuB,IAADkB,EAAAC,EAAAe,EAAA,IAArB,aAAExB,GAAcV,EAC1C,MAAMwB,GAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAASH,eAE3D,OACEtB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CACHC,GAAE,MAAAZ,OAAQO,EAAaM,SAAQ,UAC/BlB,MAAO,CAAEmB,MAAO,QAChBL,MAAO,CACLS,SAAU,CACRC,OAAoB,OAAZ1B,QAAY,IAAZA,GAAgC,QAApBQ,EAAZR,EAAc2B,0BAAkB,IAAAnB,OAApB,EAAZA,EAAkCoB,IAC1CC,OAAQ,QACRC,UACmC,mBAArB,OAAZ9B,QAAY,IAAZA,OAAY,EAAZA,EAAc+B,gBACV,gBACA,kBAERnC,UAEFK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OACEK,IACgD,OAAlC,OAAZG,QAAY,IAAZA,GAAgC,QAApBS,EAAZT,EAAc2B,0BAAkB,IAAAlB,OAApB,EAAZA,EAAkCE,SAAe,GAAAJ,OAC1CK,EAAAA,GAAY,KAAAL,OAAgB,OAAZP,QAAY,IAAZA,GAAgC,QAApBwB,EAAZxB,EAAc2B,0BAAkB,IAAAH,OAApB,EAAZA,EAAkCQ,mBACrD,kCAENlC,IAAI,MAENN,EAAAA,EAAAA,KAAA,KAAAI,SAAgB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAEpBX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,cAG3C,ECAX,EAlC6BhB,IAAuB,IAADkB,EAAAC,EAAAe,EAAA,IAArB,aAAExB,GAAcV,EAC5C,MAAMwB,GAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAASH,eAE3D,OACEtB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CACHC,GAAE,MAAAZ,OAAQO,EAAaM,SAAQ,YAC/BlB,MAAO,CAAEmB,MAAO,QAChBL,MAAO,CACLS,SAAU,CACRC,OAAoB,OAAZ1B,QAAY,IAAZA,GAAkC,QAAtBQ,EAAZR,EAAciC,4BAAoB,IAAAzB,OAAtB,EAAZA,EAAoCoB,IAC5CC,OAAQ,YAEVjC,UAEFK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAeN,SAAA,EAC7BK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAmBN,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OACEK,IACkD,OAApC,OAAZG,QAAY,IAAZA,GAAkC,QAAtBS,EAAZT,EAAciC,4BAAoB,IAAAxB,OAAtB,EAAZA,EAAoCE,SAAe,GAAAJ,OAC5CK,EAAAA,GAAY,KAAAL,OAAgB,OAAZP,QAAY,IAAZA,GAAkC,QAAtBwB,EAAZxB,EAAciC,4BAAoB,IAAAT,OAAtB,EAAZA,EAAoCU,qBACvD,kCAENpC,IAAI,MAENN,EAAAA,EAAAA,KAAA,KAAAI,SAAgB,OAAZI,QAAY,IAAZA,OAAY,EAAZA,EAAcG,oBAEpBX,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,UACzBJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIQ,IAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,YAAYC,OAAO,cAG3C,ECLX,EAtB0BhB,IAAuB,IAAtB,aAAEU,GAAcV,EACzC,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAWN,SACZ,OAAZI,QAAY,IAAZA,GAAAA,EAAciC,sBACbzC,EAAAA,EAAAA,KAAC2C,EAAoB,CAACnC,aAAcA,IACtB,OAAZA,QAAY,IAAZA,GAAAA,EAAc2B,oBAChBnC,EAAAA,EAAAA,KAAC4C,EAAkB,CAACpC,aAAcA,IACpB,OAAZA,QAAY,IAAZA,GAAAA,EAAcsB,eAChB9B,EAAAA,EAAAA,KAAC6C,EAAa,CAACrC,aAAcA,IACf,OAAZA,QAAY,IAAZA,GAAAA,EAAcU,kBAChBlB,EAAAA,EAAAA,KAAC8C,EAAgB,CAACtC,aAAcA,IAClB,OAAZA,QAAY,IAAZA,GAAAA,EAAcuC,qBAChB/C,EAAAA,EAAAA,KAACgD,EAAmB,CAACxC,aAAcA,IACrB,OAAZA,QAAY,IAAZA,GAAAA,EAAcyC,yBAChBjD,EAAAA,EAAAA,KAACkD,EAAI,CAAC3C,OAAO,EAAMC,aAAcA,KAEjCR,EAAAA,EAAAA,KAACkD,EAAI,CAAC3C,OAAO,EAAOC,aAAcA,KAEhC,EC+CV,QAlEA,WACE,MAAM2C,GAAK5B,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAAS0B,MAC1C3B,EAAO4B,IAAYC,EAAAA,EAAAA,WAAS,IAC5BC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAC1BG,EAAKC,IAAUC,EAAAA,EAAAA,OACfC,EAAYC,IAAiBP,EAAAA,EAAAA,UAAS,KACtCQ,EAAoBC,IAAyBT,EAAAA,EAAAA,WAAS,IACvD,yBAAEU,EAAwB,gCAAEC,IAChCC,EAAAA,EAAAA,IAA4B,CAC1BC,KAAM,CACJf,GAAIA,EACJG,KAAMA,EACNa,MAAO,IAETC,MAAOjB,IA8BX,OA3BAkB,EAAAA,EAAAA,YAAU,KACJlB,IACFW,GAAsB,GACtBE,IACF,GACC,CAACV,EAAMH,EAAIa,KAEdK,EAAAA,EAAAA,YAAU,KACJZ,GAAUjC,GAAO+B,GAASD,GAASA,EAAO,GAAE,GAC/C,CAACG,EAAQjC,KAEZ6C,EAAAA,EAAAA,YAAU,KACR,GAA4B,OAAxBN,QAAwB,IAAxBA,GAAAA,EAA0BO,OAAQ,CACpC,MAAMC,EAAa,IAAIZ,KAAuC,OAAxBI,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BO,QAC1DE,EAAe,IAAI,IAAIC,IAAIF,EAAWG,IAAIC,KAAKC,aAAaF,IAChEC,KAAKE,OAEPjB,EAAcY,GACdV,GAAsB,EACxB,CAEgD,MAApB,OAAxBC,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BO,OAAOQ,QAAe1B,GAAS,GACxDA,GAAS,EAAM,GAEnB,CAAyB,OAAxBW,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BO,UAI5B7D,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAWN,SAAA,CACD,KAAb,OAAVuD,QAAU,IAAVA,OAAU,EAAVA,EAAYmB,UAAuC,IAAvBjB,IAC3B7D,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAaN,UAC3BJ,EAAAA,EAAAA,KAAA,OAAKK,IAAI,qBAAqBC,IAAI,OAG3B,OAAVqD,QAAU,IAAVA,OAAU,EAAVA,EAAYe,KAAI,CAAClE,EAAcuE,KACpB,OAAVpB,QAAU,IAAVA,OAAU,EAAVA,EAAYmB,UAAWC,EAAQ,GAC7B/E,EAAAA,EAAAA,KAAA,OAAiBwD,IAAKA,EAAIpD,UACxBJ,EAAAA,EAAAA,KAACgF,EAAiB,CAACxE,aAAcA,KADzBuE,IAIV/E,EAAAA,EAAAA,KAACgF,EAAiB,CAAaxE,aAAcA,GAArBuE,KAI3BlB,IAAsB7D,EAAAA,EAAAA,KAACiF,EAAAA,EAAa,MAG3C,ECvEA,EAAyB,uBAAzB,EAAyF,qB,eC8BzF,QAzBA,SAAenF,GAA0C,IAAzC,qBAAEoF,EAAoB,aAAEC,GAAcrF,EACpD,MAAM,EAAEsF,IAAMC,EAAAA,EAAAA,MACd,OACErF,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAc4E,QAASA,IAAMJ,GAAqB,GAAM9E,UActEK,EAAAA,EAAAA,MAAA,OAAKR,UAAWS,EAAWN,SAAA,EACzBJ,EAAAA,EAAAA,KAAA,MAAAI,SAAKgF,EAAE,qBACPpF,EAAAA,EAAAA,KAAA,KAAAI,SAAIgF,EAAE,qBAId,ECxBMG,GAAkBC,EAAAA,EAAAA,OAAK,IAAM,mCAC7BC,GAAoBD,EAAAA,EAAAA,OAAK,IAC7B,mCAoCF,QAjCA,WACE,MAAOL,EAAcO,IAAmBrC,EAAAA,EAAAA,WAAS,GAEjD,OACE5C,EAAAA,EAAAA,MAAAkF,EAAAA,SAAA,CAAAvF,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAMkF,OAAOxF,UACT,IAAjB+E,GACCnF,EAAAA,EAAAA,KAAC6F,EAAAA,EAAc,CAAAzF,UACbJ,EAAAA,EAAAA,KAACyF,EAAiB,CAChBN,aAAcA,EACdD,qBAAuBY,GAAMJ,EAAgBI,QAIjD9F,EAAAA,EAAAA,KAAC+F,EAAM,CACLZ,aAAcA,EACdD,qBAAuBY,GAAMJ,EAAgBI,QAInD9F,EAAAA,EAAAA,KAAA,OAAKC,UAAWS,EAAMsF,KAAK5F,UACP,IAAjB+E,GACCnF,EAAAA,EAAAA,KAAC6F,EAAAA,EAAc,CAAAzF,UACbJ,EAAAA,EAAAA,KAACuF,EAAe,OAGlBvF,EAAAA,EAAAA,KAACiG,EAAI,QAKf,C,6ICzCA,MAAMC,EAAU,UACVC,EAAc,eACdC,EAAc,yBAEPC,EAAoCC,GACxCA,EAAQC,MAAM,CACnBA,MAAQrC,GAAI,GAAAnD,OACPmF,EAAO,mBAAAnF,OAAkBmD,EAAKf,GAAE,iBAAApC,OAAgBmD,EAAKZ,KAAI,WAAAvC,OAAUmD,EAAKC,SAIpEqC,EAA+BF,GACnCA,EAAQC,MAAM,CACnBA,MAAQrC,GAAI,GAAAnD,OACPmF,EAAO,oBAAAnF,OAAmBmD,EAAKf,GAAE,iBAAApC,OAAgBmD,EAAKZ,KAAI,WAAAvC,OAAUmD,EAAKC,SAIrEsC,EAAoBH,GACxBA,EAAQC,MAAM,CACnBA,MAAQrC,IAAI,IAAAwC,EAAA,SAAA3F,OACPoF,EAAW,KAAApF,OAAImD,EAAKf,GAAE,mBAAApC,OAAkBmD,EAAKZ,KAAI,WAAAvC,OAClDmD,EAAKC,MAAK,cAAApD,OACe,QADf2F,EACK,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMyC,gBAAQ,IAAAD,EAAAA,EAAI,GAAE,IAI1BE,EAAoCN,GACxCA,EAAQC,MAAM,CACnBA,MAAQpD,GAAE,GAAApC,OAAQoF,EAAW,KAAApF,OAAIoC,EAAE,4BAI1B0D,EAA2BA,CAACP,EAASQ,IACzCR,EAAQS,SAAS,CACtBR,MAAQrC,IAAI,CACV8C,IAAI,GAADjG,OAAKoF,EAAW,KAAApF,OAAImD,EAAKf,GAAE,sBAAApC,OAAqBmD,EAAK+C,MACxDH,OAAQA,MAKDI,EAA6BA,CAACZ,EAASQ,IAC3CR,EAAQS,SAAS,CACtBR,MAAQY,IAAG,CACTH,IAAI,GAADjG,OAAKoF,EAAW,sBAAApF,OAAqBoG,GACxCL,OAAQA,MAKDM,EAA0BA,CAACd,EAASQ,IACxCR,EAAQS,SAAS,CACtBR,MAAQrC,IAAI,CACV8C,IAAI,GAADjG,OAAKqF,EAAW,KAAArF,OAAImD,EAAKmD,IAAG,WAAAtG,OAAUmD,EAAKoD,KAC9CR,OAAO,GAAD/F,OAAK+F,GACXd,KAAM9B,EAAKqD,oBAKJC,EAA+BA,CAAClB,EAASQ,IAC7CR,EAAQS,SAAS,CACtBR,MAAQrC,IAAI,CACV8C,IAAI,GAADjG,OAAKqF,EAAW,KAAArF,OAAImD,EAAKmD,IAAG,YAAAtG,OAAWmD,EAAKuD,KAAI,eAAA1G,OAAcmD,EAAKoD,IAAG,UAAAvG,OAASmD,EAAKwD,KACvFZ,OAAO,GAAD/F,OAAK+F,OAKJa,EAAiCrB,GACrCA,EAAQC,MAAM,CACnBA,MAAQrC,GAAI,GAAAnD,OACPqF,EAAW,KAAArF,OAAImD,EAAK0D,IAAG,wBAAA7G,OAAuBmD,EAAKZ,KAAI,WAAAvC,OAAUmD,EAAKC,MAAK,YAAApD,OAAWmD,EAAK2D,UAKvFC,EAAsCxB,GAC1CA,EAAQC,MAAM,CACnBA,MAAQrC,GAAI,GAAAnD,OACPmF,EAAO,eAAAnF,OAAcmD,EAAKf,GAAE,gBAAApC,OAAemD,EAAKZ,KAAI,WAAAvC,OAAUmD,EAAKC,SAI/D4D,EAAwCA,CAACzB,EAASQ,IACtDR,EAAQS,SAAS,CACtBR,MAAQrC,IAAI,CACV8C,IAAI,GAADjG,OAAKmF,EAAO,kBAAAnF,OAAiBmD,EAAK8D,IAAG,kBAAAjH,OAAiBmD,EAAKnE,QAC9D+G,OAAO,GAAD/F,OAAK+F,OAOJmB,EAA4C3B,GAChDA,EAAQC,MAAM,CACnBA,MAAQrC,GAAI,GAAAnD,OACPmF,EAAO,UAAAnF,OAASmD,EAAKgE,IAAG,0BAAAnH,OAAyBmD,EAAKZ,KAAI,WAAAvC,OAAUmD,EAAKC,SClF3E,MAAMgE,E,SAAcC,EAAmBC,gBAAgB,CAC5DC,UAAYhC,IAAO,CACjBvC,yBAA0BsC,EAAiCC,GAC3DiC,oBAAqB/B,EAA4BF,GACjDkC,YAAa/B,EAAiBH,GAC9BmC,yBAA0B7B,EAAiCN,GAC3DoC,iBAAkB7B,EAAyBP,EAASqC,EAAAA,IACpDC,mBAAoB1B,EAA2BZ,EAASqC,EAAAA,IACxDE,wBAAyBzB,EAAwBd,EAASwC,EAAAA,IAC1DC,qBAAsBvB,EAA6BlB,EAASqC,EAAAA,IAC5DK,sBAAuBrB,EAA8BrB,GACrD2C,2BAA4BnB,EAAmCxB,GAC/D4C,8BAA+BnB,EAC7BzB,EACAqC,EAAAA,IAEFQ,iCACElB,EAAyC3B,QAIlC,iCACX8C,EAAgC,4BAChCC,EAA2B,oBAC3BC,EAAmB,iCACnBC,EAAgC,4BAChCC,EACAC,8BAA6B,qCAC7BC,EAAkC,gCAClCC,EAA+B,8BAC/BC,EAA6B,mCAC7BC,EAAkC,yCAClCC,EAAwC,yCACxCC,GACE5B,ECpCSlE,EAA+B+F,IAC1C,MACE9F,KAAMH,EACNkG,QAASjG,GACPoF,EAAiCY,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OAC7D,MAAO,CAAEL,2BAA0BC,kCAAiC,EAGzDkG,EAA0BF,IACrC,MAAQ9F,KAAMqE,EAAqB0B,QAASE,GAC1Cd,EAA4BW,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OACtD,MAAO,CAAEmE,sBAAqB4B,6BAA4B,EAG/CC,EAAsBJ,IACjC,MAAQ9F,KAAMmG,EAAiBJ,QAASK,GACtChB,EAAoBU,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OAC9C,MAAO,CAAEiG,kBAAiBC,yBAAwB,EAGvCC,EAA+BP,IAC1C,MACE9F,KAAMuE,EACNwB,QAASO,GACPjB,EAAiCS,EAAK7G,GAAI,CAAEiB,KAAM4F,EAAK5F,OAC3D,MAAO,CAAEqE,2BAA0B+B,kCAAiC,EAGzDC,EAAsBA,KACjC,MAAO/B,GAAoBc,IAC3B,MAAO,CAACd,EAAiB,EAQdgC,EAA6BA,KACxC,MAAOC,GAA2BjB,IAClC,MAAO,CAACiB,EAAwB,EAGrBC,EAA0BA,KACrC,MAAO7B,GAAwBY,IAC/B,MAAO,CAACZ,EAAqB,EAGlB8B,EAA4Bb,IACvC,MAAQ9F,KAAM8E,EAAuBiB,QAASa,GAC5ClB,EAA8BI,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OACxD,MAAO,CAAE4E,wBAAuB8B,+BAA8B,EAGnDC,EAAiCf,IAC5C,MACE9F,KAAM+E,EACNgB,QAASe,GACPnB,EAAmCG,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OAC/D,MAAO,CAAE6E,6BAA4B+B,oCAAmC,EAG7DC,EAAmCA,KAC9C,MAAO/B,GACLY,IACF,MAAO,CAACZ,EAA8B,EAE3BgC,EAAuClB,IAClD,MACE9F,KAAMiF,EACNc,QAASkB,GACPpB,EAAyCC,EAAK9F,KAAM,CAAEE,KAAM4F,EAAK5F,OACrE,MAAO,CACL+E,mCACAgC,0CACD,C,gNCxFGC,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBtH,KAAKsH,IACJ,MAAO,GAAPjL,OAAUiL,EAAA,KAAAjL,OACA,SAARiL,GArBWC,EAsBGN,EAAQM,OApBxBX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,IAsBRN,EAAQK,IAvBpB,IAAmBC,CAuBsC,IAGpDG,UACL,CA2DO,SAASE,EACdC,EACAC,GAGA,IAFAb,EAAAc,UAAA3H,OAAA,QAAA4H,IAAAD,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCE,EAAAF,UAAA3H,OAAA,QAAA4H,IAAAD,UAAA,GAAAA,UAAA,GAAiBhB,EAEjB,GACyC,qBAAhCmB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASP,EAAQQ,wBAWvB,OAVAP,EAASG,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQV,EACRW,kBAC+B,kBAAtBvB,EAAQwB,UAAyBxB,EAAQwB,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAE3J,EAAA,SAAIqK,EAAA,SAAUC,GAnFxB,SAAwB9B,GAEtB,IAAIxI,EAAKuI,EAAYC,GACjB+B,EAAWtC,EAAYiB,IAAIlJ,GAE/B,IAAKuK,EAAU,CAEb,MAAMD,EAAW,IAAIpC,IACrB,IAAIsC,EAEJ,MAAMH,EAAW,IAAIX,sBAAsBe,IACzCA,EAAQC,SAASC,IAtEvB,IAAAC,EAyEQ,MAAMtK,EACJqK,EAAMd,gBACNW,EAAWK,MAAMb,GAAcW,EAAMZ,mBAAqBC,IAGxDxB,EAAQsC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAYzK,GAGpB,OAAAsK,EAAAN,EAASpB,IAAIyB,EAAMb,UAAnBc,EAA4BF,SAASrB,IACnCA,EAAS/I,EAAQqK,EAAM,GACvB,GACF,GACDnC,GAGHgC,EACEH,EAASG,aACRQ,MAAMC,QAAQzC,EAAQwB,WACnBxB,EAAQwB,UACR,CAACxB,EAAQwB,WAAa,IAE5BO,EAAW,CACTvK,KACAqK,WACAC,YAGFrC,EAAYe,IAAIhJ,EAAIuK,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAe1C,GAGlD,IAAI2C,EAAYb,EAASpB,IAAIE,IAAY,GAQzC,OAPKkB,EAASvB,IAAIK,IAChBkB,EAAStB,IAAII,EAAS+B,GAGxBA,EAAUC,KAAK/B,GACfgB,EAASlB,QAAQC,GAEV,WAEL+B,EAAUE,OAAOF,EAAUG,QAAQjC,GAAW,GAErB,IAArB8B,EAAUxJ,SAEZ2I,EAASiB,OAAOnC,GAChBiB,EAASmB,UAAUpC,IAGC,IAAlBkB,EAASmB,OAEXpB,EAASqB,aACTzD,EAAYsD,OAAOvL,GAEvB,CACF,CCzGkC2L,EAAAA,UC7B3B,SAASpL,IAWiC,IAXvB,UACxByJ,EAAA,MACA4B,EAAA,gBACAd,EAAA,WACAe,EAAA/C,KACAA,EAAA,YACAgD,EAAA,KACA7K,EAAA,cACA8K,EAAA,eACAvC,EAAA,SACAwC,GACF1C,UAAA3H,OAAA,QAAA4H,IAAAD,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAsB,EA+CE,MAAOvK,EAAK4L,GAAgBC,EAAAA,SAAyB,MAC/C7C,EAAiB6C,EAAAA,UAChB7N,EAAO4B,GAAkBiM,EAAAA,SAAgB,CAC9C5L,SAAUyL,EACVpB,WAAO,IAKTtB,EAAS8C,QAAUH,EAEbE,EAAAA,WACJ,KAEE,GAAIjL,IAASZ,EAAK,OAElB,IAAImL,EA4BJ,OA3BAA,EAAYrC,EACV9I,GACA,CAACC,EAAQqK,KACP1K,EAAS,CACPK,SACAqK,UAEEtB,EAAS8C,SAAS9C,EAAS8C,QAAQ7L,EAAQqK,GAE3CA,EAAMd,gBAAkBiC,GAAeN,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE1C,OACA+C,aACA7B,YAEAc,kBAEAc,SAEFpC,GAGK,KACDgC,GACFA,GACF,CACD,GAIH,CAGER,MAAMC,QAAQjB,GAAaA,EAAUf,WAAae,EAClD3J,EACAyI,EACA+C,EACAC,EACA7K,EACA6J,EACAtB,EACAoC,IAIJ,MAAMQ,EAAc,OAAAxB,EAAAvM,EAAMsM,YAAN,EAAAC,EAAad,OAC3BuC,EAA4BH,EAAAA,SAE/B7L,IACD+L,GACCN,GACA7K,GACDoL,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BnM,EAAS,CACPK,SAAUyL,EACVpB,WAAO,KAIX,MAAM2B,EAAS,CAACL,EAAQ5N,EAAMiC,OAAQjC,EAAMsM,OAO5C,OAJA2B,EAAOjM,IAAMiM,EAAO,GACpBA,EAAOhM,OAASgM,EAAO,GACvBA,EAAO3B,MAAQ2B,EAAO,GAEfA,CACT,C","sources":["Loader/QvipleLoading.jsx","webpack://mithkal-qviple/./src/Notification/InsNotification/Components/Stats/Notification/Notification.module.css?fb77","webpack://mithkal-qviple/./src/Notification/InsNotification/Components/Stats/Notification/Body/Body.module.css?8cfb","webpack://mithkal-qviple/./src/Notification/InsNotification/Components/Stats/Notification/Body/Items/Item.module.css?82b3","Notification/InsNotification/Components/Stats/Notification/Body/Items/Item.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Items/NotifyByDepartPhoto.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Items/NotifyByInsPhoto.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Items/NotifyByPhoto.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Items/NotifyByStaffPhoto.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Items/NotifyByStudentPhoto.jsx","Notification/InsNotification/Components/Stats/Notification/Body/NotificationConfi.jsx","Notification/InsNotification/Components/Stats/Notification/Body/Body.jsx","webpack://mithkal-qviple/./src/Notification/InsNotification/Components/Stats/Notification/Header/Header.module.css?b775","Notification/InsNotification/Components/Stats/Notification/Header/Header.jsx","Notification/InsNotification/Components/Stats/Notification/Notification.jsx","services/staff_department/activity_query_mutation_function.js","services/staff_department/activityApi.js","hooks/member_tab/activity-api.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React from \"react\";\nimport styles from \"./QvipleLoader.module.css\";\nconst QvipleLoading = ({ status }) => {\n  return (\n    <div className={styles.loaderGif}>\n      <img\n        src={\n          status === \"white\"\n            ? \"/images/loader/loader-bg-white.gif\"\n            : \"/images/loader/loader.gif\"\n        }\n        alt=\"for load an items\"\n      />\n    </div>\n  );\n};\n\nexport default QvipleLoading;\n","// extracted by mini-css-extract-plugin\nexport default {\"body\":\"Notification_body__YVF+x\"};","// extracted by mini-css-extract-plugin\nexport default {\"body\":\"Body_body__UG+Mb\",\"noData\":\"Body_noData__s3Sns\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Item_item__tNAlK\",\"item_active\":\"Item_item_active__GY7y+\",\"text\":\"Item_text__7p9jA\",\"textlast\":\"Item_textlast__-oe0K\",\"btn\":\"Item_btn__rk0jm\",\"eachItem\":\"Item_eachItem__uSED1\",\"eachItemleft\":\"Item_eachItemleft__6PJwo\"};","import style from \"./Item.module.css\";\nimport React from \"react\";\nimport moment from \"moment\";\n\nfunction Item({ admin, notification }) {\n  return admin ? (\n    <div className={style.eachItem}>\n      <div className={style.eachItemleft}>\n        <img src=\"/images/career/newLogo.svg\" alt=\"\" />\n        <p>Qviple {notification?.notifyContent}</p>\n      </div>\n      <div className={style.text}>\n        <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n      </div>\n    </div>\n  ) : (\n    <div className={style.eachItem}>\n      <div className={style.eachItemleft}>\n        <img src=\"/images/avatar-icon.png\" alt=\"\" />\n        <p className={style.textlast}>{notification?.notifyContent}</p>\n      </div>\n      <div className={`${style.text} `}>\n        <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Item;\n","import style from \"./Item.module.css\";\nimport React from \"react\";\nimport { imageShowUrl } from \"../../../../../../../services/BaseUrl\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nconst NotifyByDepartPhoto = ({ notification }) => {\n  return (\n    <div className={style.eachItem}>\n      <div className={style.eachItemleft}>\n        <img\n          src={\n            notification?.notifyByInsPhoto?.photoId !== \"1\"\n              ? `${imageShowUrl}/${notification?.notifyByInsPhoto?.insProfilePhoto}`\n              : \"/images/ins_default_profile.svg\"\n          }\n          alt=\"\"\n        />\n        <p>{notification?.notifyContent}</p>\n      </div>\n      <div className={style.text}>\n        <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default NotifyByDepartPhoto;\n","import React from \"react\";\nimport style from \"./Item.module.css\";\nimport { imageShowUrl } from \"../../../../../../../services/BaseUrl\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst NotifyByInsPhoto = ({ notification }) => {\n  const loginProfile = useSelector((state) => state.idChange.loginProfile);\n\n  return (\n    <Link\n      to={`/q/${loginProfile.username}/following`}\n      style={{ width: \"100%\" }}\n      // state={{\n      //   openType: {\n      //     openId: notification?.notifyByStaffPhoto?._id,\n      //     asOpen: \"staff\",\n      //   },\n      // }}\n    >\n      <div className={style.eachItem}>\n        <div className={style.eachItemleft}>\n          <img\n            src={\n              notification?.notifyByInsPhoto?.photoId !== \"1\"\n                ? `${imageShowUrl}/${notification?.notifyByInsPhoto?.insProfilePhoto}`\n                : \"/images/ins_default_profile.svg\"\n            }\n            alt=\"\"\n          />\n          <p>{notification?.notifyContent}</p>\n        </div>\n        <div className={style.text}>\n          <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default NotifyByInsPhoto;\n","import style from \"./Item.module.css\";\nimport React from \"react\";\nimport { imageShowUrl } from \"../../../../../../../services/BaseUrl\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst NotifyByPhoto = ({ notification }) => {\n  const loginProfile = useSelector((state) => state.idChange.loginProfile);\n\n  return (\n    <Link\n      to={`/q/${loginProfile.username}/following`}\n      style={{ width: \"100%\" }}\n    >\n      <div className={style.eachItem}>\n        <div className={style.eachItemleft}>\n          <img\n            src={\n              notification?.notifyByPhoto?.photoId !== \"1\"\n                ? `${imageShowUrl}/${notification?.notifyByPhoto?.profilePhoto}`\n                : \"/images/ins_default_profile.svg\"\n            }\n            alt=\"\"\n          />\n          <p>{notification?.notifyContent}</p>\n        </div>\n        <div className={style.text}>\n          <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default NotifyByPhoto;\n","import React from \"react\";\nimport style from \"./Item.module.css\";\nimport { imageShowUrl } from \"../../../../../../../services/BaseUrl\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nconst NotifyByStaffPhoto = ({ notification }) => {\n  const loginProfile = useSelector((state) => state.idChange.loginProfile);\n\n  return (\n    <Link\n      to={`/q/${loginProfile.username}/staff`}\n      style={{ width: \"100%\" }}\n      state={{\n        openType: {\n          openId: notification?.notifyByStaffPhoto?._id,\n          asOpen: \"staff\",\n          activeTab:\n            notification?.notifyCategory === \"Approve Staff\"\n              ? \"Approve Staff\"\n              : \"Request Staff\",\n        },\n      }}\n    >\n      <div className={style.eachItem}>\n        <div className={style.eachItemleft}>\n          <img\n            src={\n              notification?.notifyByStaffPhoto?.photoId !== \"1\"\n                ? `${imageShowUrl}/${notification?.notifyByStaffPhoto?.staffProfilePhoto}`\n                : \"/images/ins_default_profile.svg\"\n            }\n            alt=\"\"\n          />\n          <p>{notification?.notifyContent}</p>\n        </div>\n        <div className={style.text}>\n          <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default NotifyByStaffPhoto;\n","import style from \"./Item.module.css\";\nimport React from \"react\";\nimport { imageShowUrl } from \"../../../../../../../services/BaseUrl\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nconst NotifyByStudentPhoto = ({ notification }) => {\n  const loginProfile = useSelector((state) => state.idChange.loginProfile);\n\n  return (\n    <Link\n      to={`/q/${loginProfile.username}/student`}\n      style={{ width: \"100%\" }}\n      state={{\n        openType: {\n          openId: notification?.notifyByStudentPhoto?._id,\n          asOpen: \"student\",\n        },\n      }}\n    >\n      <div className={style.eachItem}>\n        <div className={style.eachItemleft}>\n          <img\n            src={\n              notification?.notifyByStudentPhoto?.photoId !== \"1\"\n                ? `${imageShowUrl}/${notification?.notifyByStudentPhoto?.studentProfilePhoto}`\n                : \"/images/ins_default_profile.svg\"\n            }\n            alt=\"\"\n          />\n          <p>{notification?.notifyContent}</p>\n        </div>\n        <div className={style.text}>\n          <p>{moment(notification?.notifyTime).format(\"LT\")}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default NotifyByStudentPhoto;\n","import React from \"react\";\nimport Item from \"./Items/Item\";\nimport style from \"./Items/Item.module.css\";\nimport NotifyByDepartPhoto from \"./Items/NotifyByDepartPhoto\";\nimport NotifyByInsPhoto from \"./Items/NotifyByInsPhoto\";\nimport NotifyByPhoto from \"./Items/NotifyByPhoto\";\nimport NotifyByStaffPhoto from \"./Items/NotifyByStaffPhoto\";\nimport NotifyByStudentPhoto from \"./Items/NotifyByStudentPhoto\";\n\nconst NotificationConfi = ({ notification }) => {\n  return (\n    <div className={style.item}>\n      {notification?.notifyByStudentPhoto ? (\n        <NotifyByStudentPhoto notification={notification} />\n      ) : notification?.notifyByStaffPhoto ? (\n        <NotifyByStaffPhoto notification={notification} />\n      ) : notification?.notifyByPhoto ? (\n        <NotifyByPhoto notification={notification} />\n      ) : notification?.notifyByInsPhoto ? (\n        <NotifyByInsPhoto notification={notification} />\n      ) : notification?.notifyByDepartPhoto ? (\n        <NotifyByDepartPhoto notification={notification} />\n      ) : notification?.notifyBySuperAdminPhoto ? (\n        <Item admin={true} notification={notification} />\n      ) : (\n        <Item admin={false} notification={notification} />\n      )}\n    </div>\n  );\n};\n\nexport default NotificationConfi;\n","import React, { useState, useEffect } from \"react\";\nimport style from \"./Body.module.css\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useInstituteAllNotification } from \"../../../../../../hooks/member_tab/activity-api\";\nimport { useSelector } from \"react-redux\";\nimport QvipleLoading from \"../../../../../../Loader/QvipleLoading\";\nimport NotificationConfi from \"./NotificationConfi\";\n\nfunction Body() {\n  const id = useSelector((state) => state.idChange.id);\n  const [state, setState] = useState(true);\n  const [page, setPage] = useState(1);\n  const [ref, inView] = useInView();\n  const [notifyList, setNotifyList] = useState([]);\n  const [showingDataLoading, setShowingDataLoading] = useState(true);\n  const { instituteAllNotification, instituteAllNotificationRefetch } =\n    useInstituteAllNotification({\n      data: {\n        id: id,\n        page: page,\n        limit: 10,\n      },\n      skip: !id,\n    });\n\n  useEffect(() => {\n    if (id) {\n      setShowingDataLoading(true);\n      instituteAllNotificationRefetch();\n    }\n  }, [page, id, instituteAllNotificationRefetch]);\n\n  useEffect(() => {\n    if (inView && state) setPage((page) => page + 1);\n  }, [inView, state]);\n\n  useEffect(() => {\n    if (instituteAllNotification?.notify) {\n      const uniquePost = [...notifyList, ...instituteAllNotification?.notify];\n      const uniqueRefind = [...new Set(uniquePost.map(JSON.stringify))].map(\n        JSON.parse\n      );\n      setNotifyList(uniqueRefind);\n      setShowingDataLoading(false);\n    }\n    //for next api is call or not dashboard\n    if (instituteAllNotification?.notify.length === 10) setState(true);\n    else setState(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [instituteAllNotification?.notify]);\n\n  // console.info(\"this is notification\", notifyList);\n  return (\n    <div className={style.body}>\n      {notifyList?.length === 0 && showingDataLoading === false && (\n        <div className={style.noData}>\n          <img src=\"/images/nodata.jpg\" alt=\"\" />\n        </div>\n      )}\n      {notifyList?.map((notification, index) =>\n        notifyList?.length === index + 1 ? (\n          <div key={index} ref={ref}>\n            <NotificationConfi notification={notification} />\n          </div>\n        ) : (\n          <NotificationConfi key={index} notification={notification} />\n        )\n      )}\n\n      {showingDataLoading && <QvipleLoading />}\n    </div>\n  );\n}\n\nexport default Body;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Header_header__bou17\",\"avatars\":\"Header_avatars__0GU1V\",\"text\":\"Header_text__1DhZA\"};","import React from \"react\";\nimport style from \"./Header.module.css\";\n// import Avatar from \"@mui/material/Avatar\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./Header.css\";\n\nfunction Header({ changeToNewFollowers, newFollowers }) {\n  const { t } = useTranslation();\n  return (\n    <div className={style.header} onClick={() => changeToNewFollowers(true)}>\n      {/* <div className={style.avatars}>\n        <Avatar\n          alt=\"Remy Sharp\"\n          src=\"/images/testimonial-1.svg\"\n          sx={{ width: 24, height: 24 }}\n        />\n        <Avatar\n          alt=\"Travis Howard\"\n          src=\"/images/testimonial-2.svg\"\n          sx={{ width: 24, height: 24 }}\n        />\n      </div> */}\n\n      <div className={style.text}>\n        <h6>{t(\"new_followerss\")}</h6>\n        <p>{t(\"follow_back\")}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import { lazy, useState } from \"react\";\nimport CustomSuspense from \"../../../../../Custom/SuspenseLoading/CustomSuspense\";\nimport style from \"./Notification.module.css\";\nimport Body from \"./Body/Body\";\nimport Header from \"./Header/Header\";\nconst NewFollowerBody = lazy(() => import(\"./NewFollowerBody/NewFollowerBody\"));\nconst NewFollowerHeader = lazy(() =>\n  import(\"./NewFollowerHeader/NewFollowerHeader\")\n);\n\nfunction Notification() {\n  const [newFollowers, setNewFollowers] = useState(false);\n\n  return (\n    <>\n      <div className={style.header}>\n        {newFollowers === true ? (\n          <CustomSuspense>\n            <NewFollowerHeader\n              newFollowers={newFollowers}\n              changeToNewFollowers={(w) => setNewFollowers(w)}\n            />\n          </CustomSuspense>\n        ) : (\n          <Header\n            newFollowers={newFollowers}\n            changeToNewFollowers={(w) => setNewFollowers(w)}\n          />\n        )}\n      </div>\n      <div className={style.body}>\n        {newFollowers === true ? (\n          <CustomSuspense>\n            <NewFollowerBody />\n          </CustomSuspense>\n        ) : (\n          <Body />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Notification;\n","const baseUrl = \"/api/v1\";\nconst activityUrl = \"/api/v1/user\";\nconst electionUrl = \"/api/v1/election/event\";\n\nexport const instituteAllNotificationFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${baseUrl}/ins/dashboard/${data.id}/notify?page=${data.page}&limit=${data.limit}`,\n  });\n};\n\nexport const userAllNotificationFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${baseUrl}/user/dashboard/${data.id}/notify?page=${data.page}&limit=${data.limit}`,\n  });\n};\n\nexport const activityFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${activityUrl}/${data.id}/activity?page=${data.page}&limit=${\n        data.limit\n      }&category=${data?.category ?? \"\"}`,\n  });\n};\n\nexport const activityNotifiationCountFunction = (builder) => {\n  return builder.query({\n    query: (id) => `${activityUrl}/${id}/activity/total/notify`,\n  });\n};\n\nexport const activityMarkViewFunction = (builder, method) => {\n  return builder.mutation({\n    query: (data) => ({\n      url: `${activityUrl}/${data.id}/mark/viewed?type=${data.type}`,\n      method: method,\n    }),\n  });\n};\n\nexport const activityMarkAsReadFunction = (builder, method) => {\n  return builder.mutation({\n    query: (nid) => ({\n      url: `${activityUrl}/read/notify/user/${nid}`,\n      method: method,\n    }),\n  });\n};\n\nexport const activityAppliedFunction = (builder, method) => {\n  return builder.mutation({\n    query: (data) => ({\n      url: `${electionUrl}/${data.eid}/apply/${data.sid}`,\n      method: `${method}`,\n      body: data.appliedElection,\n    }),\n  });\n};\n\nexport const activityElectionVoteFunction = (builder, method) => {\n  return builder.mutation({\n    query: (data) => ({\n      url: `${electionUrl}/${data.eid}/status/${data.apid}/candidate/${data.sid}/vote/${data.aid}`,\n      method: `${method}`,\n    }),\n  });\n};\n\nexport const activitySupportMemberFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${electionUrl}/${data.did}/one/institute?page=${data.page}&limit=${data.limit}&search=${data.search}`,\n  });\n};\n\n// == for gr number edit\nexport const instituteAllGRNotificationFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${baseUrl}/extra/all/${data.id}/query?page=${data.page}&limit=${data.limit}`,\n  });\n};\n\nexport const instituteGRNotificationActionFunction = (builder, method) => {\n  return builder.mutation({\n    query: (data) => ({\n      url: `${baseUrl}/extra/status/${data.qid}/query?status=${data.status}`,\n      method: `${method}`,\n    }),\n  });\n};\n\n// for student message\n\nexport const getNotificationAllStudentMessageFunction = (builder) => {\n  return builder.query({\n    query: (data) =>\n      `${baseUrl}/user/${data.uid}/student/message?page=${data.page}&limit=${data.limit}`,\n  });\n};\n","import { patchMethod, postMethod } from \"../BaseUrl\";\nimport {\n  instituteAllNotificationFunction,\n  userAllNotificationFunction,\n  activityFunction,\n  activityAppliedFunction,\n  activityElectionVoteFunction,\n  activitySupportMemberFunction,\n  activityNotifiationCountFunction,\n  activityMarkViewFunction,\n  activityMarkAsReadFunction,\n  instituteAllGRNotificationFunction,\n  instituteGRNotificationActionFunction,\n  getNotificationAllStudentMessageFunction,\n} from \"./activity_query_mutation_function\";\nimport { activityDynamicApi } from \"./activityDynamicApi\";\n\nexport const activityApi = activityDynamicApi.injectEndpoints({\n  endpoints: (builder) => ({\n    instituteAllNotification: instituteAllNotificationFunction(builder),\n    userAllNotification: userAllNotificationFunction(builder),\n    allActivity: activityFunction(builder),\n    activityNotifiationCount: activityNotifiationCountFunction(builder),\n    activityMarkView: activityMarkViewFunction(builder, patchMethod),\n    activityMarkAsRead: activityMarkAsReadFunction(builder, patchMethod),\n    activityElectionApplied: activityAppliedFunction(builder, postMethod),\n    activityElectionVote: activityElectionVoteFunction(builder, patchMethod),\n    activitySupportMember: activitySupportMemberFunction(builder),\n    instituteAllGRNotification: instituteAllGRNotificationFunction(builder),\n    instituteGRNotificationAction: instituteGRNotificationActionFunction(\n      builder,\n      patchMethod\n    ),\n    getNotificationAllStudentMessage:\n      getNotificationAllStudentMessageFunction(builder),\n  }),\n});\n\nexport const {\n  useInstituteAllNotificationQuery,\n  useUserAllNotificationQuery,\n  useAllActivityQuery,\n  useActivityNotifiationCountQuery,\n  useActivityMarkViewMutation,\n  useActivityMarkAsReadMutation,\n  useActivityElectionAppliedMutation,\n  useActivityElectionVoteMutation,\n  useActivitySupportMemberQuery,\n  useInstituteAllGRNotificationQuery,\n  useInstituteGRNotificationActionMutation,\n  useGetNotificationAllStudentMessageQuery,\n} = activityApi;\n","import {\n  useInstituteAllNotificationQuery,\n  useUserAllNotificationQuery,\n  useAllActivityQuery,\n  useActivityNotifiationCountQuery,\n  useActivityMarkViewMutation,\n  useActivityMarkAsReadMutation,\n  useActivityElectionAppliedMutation,\n  useActivityElectionVoteMutation,\n  useActivitySupportMemberQuery,\n  useInstituteAllGRNotificationQuery,\n  useInstituteGRNotificationActionMutation,\n  useGetNotificationAllStudentMessageQuery,\n} from \"../../services/staff_department/activityApi\";\n\nexport const useInstituteAllNotification = (args) => {\n  const {\n    data: instituteAllNotification,\n    refetch: instituteAllNotificationRefetch,\n  } = useInstituteAllNotificationQuery(args.data, { skip: args.skip });\n  return { instituteAllNotification, instituteAllNotificationRefetch };\n};\n\nexport const useUserAllNotification = (args) => {\n  const { data: userAllNotification, refetch: userAllNotificationRefetch } =\n    useUserAllNotificationQuery(args.data, { skip: args.skip });\n  return { userAllNotification, userAllNotificationRefetch };\n};\n\nexport const useAllActivityList = (args) => {\n  const { data: allActivityList, refetch: allActivityListRefetch } =\n    useAllActivityQuery(args.data, { skip: args.skip });\n  return { allActivityList, allActivityListRefetch };\n};\n\nexport const useActivityNotifiationCount = (args) => {\n  const {\n    data: activityNotifiationCount,\n    refetch: activityNotifiationCountRefetch,\n  } = useActivityNotifiationCountQuery(args.id, { skip: args.skip });\n  return { activityNotifiationCount, activityNotifiationCountRefetch };\n};\n\nexport const useActivityMarkView = () => {\n  const [activityMarkView] = useActivityMarkViewMutation();\n  return [activityMarkView];\n};\n\nexport const useActivityMarkAsRead = () => {\n  const [activityMarkAsRead] = useActivityMarkAsReadMutation();\n  return [activityMarkAsRead];\n};\n\nexport const useActivityAppliedElection = () => {\n  const [activityAppliedElection] = useActivityElectionAppliedMutation();\n  return [activityAppliedElection];\n};\n\nexport const useActivityElectionVote = () => {\n  const [activityElectionVote] = useActivityElectionVoteMutation();\n  return [activityElectionVote];\n};\n\nexport const useActivitySupportMember = (args) => {\n  const { data: activitySupportMember, refetch: activitySupportMemberRefetch } =\n    useActivitySupportMemberQuery(args.data, { skip: args.skip });\n  return { activitySupportMember, activitySupportMemberRefetch };\n};\n\nexport const useInstituteAllGRNotification = (args) => {\n  const {\n    data: instituteAllGRNotification,\n    refetch: instituteAllGRNotificationRefetch,\n  } = useInstituteAllGRNotificationQuery(args.data, { skip: args.skip });\n  return { instituteAllGRNotification, instituteAllGRNotificationRefetch };\n};\n\nexport const useInstituteGRNotificationAction = () => {\n  const [instituteGRNotificationAction] =\n    useInstituteGRNotificationActionMutation();\n  return [instituteGRNotificationAction];\n};\nexport const useGetNotificationAllStudentMessage = (args) => {\n  const {\n    data: getNotificationAllStudentMessage,\n    refetch: getNotificationAllStudentMessageRefetch,\n  } = useGetNotificationAllStudentMessageQuery(args.data, { skip: args.skip });\n  return {\n    getNotificationAllStudentMessage,\n    getNotificationAllStudentMessageRefetch,\n  };\n};\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","status","_jsx","className","styles","loaderGif","children","src","alt","admin","notification","_jsxs","style","notifyContent","moment","notifyTime","format","concat","_notification$notifyB","_notification$notifyB2","notifyByInsPhoto","photoId","imageShowUrl","insProfilePhoto","loginProfile","useSelector","state","idChange","Link","to","username","width","notifyByPhoto","profilePhoto","_notification$notifyB3","openType","openId","notifyByStaffPhoto","_id","asOpen","activeTab","notifyCategory","staffProfilePhoto","notifyByStudentPhoto","studentProfilePhoto","NotifyByStudentPhoto","NotifyByStaffPhoto","NotifyByPhoto","NotifyByInsPhoto","notifyByDepartPhoto","NotifyByDepartPhoto","notifyBySuperAdminPhoto","Item","id","setState","useState","page","setPage","ref","inView","useInView","notifyList","setNotifyList","showingDataLoading","setShowingDataLoading","instituteAllNotification","instituteAllNotificationRefetch","useInstituteAllNotification","data","limit","skip","useEffect","notify","uniquePost","uniqueRefind","Set","map","JSON","stringify","parse","length","index","NotificationConfi","QvipleLoading","changeToNewFollowers","newFollowers","t","useTranslation","onClick","NewFollowerBody","lazy","NewFollowerHeader","setNewFollowers","_Fragment","header","CustomSuspense","w","Header","body","Body","baseUrl","activityUrl","electionUrl","instituteAllNotificationFunction","builder","query","userAllNotificationFunction","activityFunction","_data$category","category","activityNotifiationCountFunction","activityMarkViewFunction","method","mutation","url","type","activityMarkAsReadFunction","nid","activityAppliedFunction","eid","sid","appliedElection","activityElectionVoteFunction","apid","aid","activitySupportMemberFunction","did","search","instituteAllGRNotificationFunction","instituteGRNotificationActionFunction","qid","getNotificationAllStudentMessageFunction","uid","activityApi","activityDynamicApi","injectEndpoints","endpoints","userAllNotification","allActivity","activityNotifiationCount","activityMarkView","patchMethod","activityMarkAsRead","activityElectionApplied","postMethod","activityElectionVote","activitySupportMember","instituteAllGRNotification","instituteGRNotificationAction","getNotificationAllStudentMessage","useInstituteAllNotificationQuery","useUserAllNotificationQuery","useAllActivityQuery","useActivityNotifiationCountQuery","useActivityMarkViewMutation","useActivityMarkAsReadMutation","useActivityElectionAppliedMutation","useActivityElectionVoteMutation","useActivitySupportMemberQuery","useInstituteAllGRNotificationQuery","useInstituteGRNotificationActionMutation","useGetNotificationAllStudentMessageQuery","args","refetch","useUserAllNotification","userAllNotificationRefetch","useAllActivityList","allActivityList","allActivityListRefetch","useActivityNotifiationCount","activityNotifiationCountRefetch","useActivityMarkView","useActivityAppliedElection","activityAppliedElection","useActivityElectionVote","useActivitySupportMember","activitySupportMemberRefetch","useInstituteAllGRNotification","instituteAllGRNotificationRefetch","useInstituteGRNotificationAction","useGetNotificationAllStudentMessage","getNotificationAllStudentMessageRefetch","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","triggerOnce","initialInView","onChange","setRef","React2","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}